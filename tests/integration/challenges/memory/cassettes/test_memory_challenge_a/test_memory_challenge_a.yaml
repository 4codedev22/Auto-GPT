interactions:
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read text from file, args:
      \"filename\": \"<filename>\"\n5. read_raw_file: Read file, args: \"filename\":
      \"<filename>\"\n6. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: () -> str\n11. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n12. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n13. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3360'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4RSTW/aQBC991eM5rwgECG4vkWJVKFIvaT0kLpCy3qwN9i77s5YoUH+79ViTCqo
        0uubmfcxMwe0OaZoSi2mbqrR4svz0/5r8nZ/f7uSp/rxYXf3/P1tKbJa3j2gQr95ISOnibHxdVOR
        WO9QoQmkhXJMp7fJzTSZfZ7NFdY+pwpTLBoZzcbzkbRh40eT2WSKClvWBWF6wCb4upG1+B05xnRx
        kyh85z7j09lCoXjR1RlKknmn0JTeGmJMfxywJh5og68IU9TMlkU7iSa9E3IxwCFzAAAZSunbohTO
        MIUTeCrQXiKY4RK49G2VA4sOApvfEEjn1hUgJYF1LKE10Sqvp2PZC2xtRdDy0BG710fM+LrWLh9n
        qP6WCqTZO+uKXu9bSbC1gQVYqAHLIB5al1OIOfIrVYjga6kltgb61dpAOfgt1HSp1FTa9SIjWDH9
        216Ui+BH8S6JTbBijeV6WJkjOhKR4zZEIS2w/DDFhrY+EDTBG6K43ksNbkjvBv5XW1X/P8jgtafp
        1HD1U9KroztdU69w3sqFCR2Ky1/pC7H3ffx6bYOJo5GTn8x12CncWme5XPdvgCmy+AYVWpfTHtNJ
        97P79AcAAP//AwDMcPMmqgMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7c7e437aafbd3132-SOF
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 15 May 2023 20:52:24 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-gsghk4kr5xmbjprowdzr8zt2
      openai-processing-ms:
      - '8955'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86494'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.336s
      x-request-id:
      - d9ff235826db175c96d70ad1ed0ece57
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Your
      task is to create a concise running summary of actions and information results
      in the provided text, focusing on key and potentially important information
      to remember.\n\nYou will receive the current summary and the your latest actions.
      Combine them, adding relevant key information from the latest development in
      1st person past tense and keeping the summary concise.\n\nSummary So Far:\n\"\"\"\nI
      was created.\n\"\"\"\n\nLatest Development:\n\"\"\"\nNothing new happened.\n\"\"\"\n"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '599'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SOUUvDMBRG3/0V4XtOR7tuzuVNEMQXEZyIiowsvWujbW5M7pg4+t9lMN3rgXM4
        B/gGBq6z4obYF4vb19Uy1c+rh5zar/tHmm93w8/102Kabl6gwZsPcnIyJo6H2JN4DtBwiaxQA1Nd
        Xs2qq3o5W2gM3FAPgzZKUU/mhezShouyLito7LJtCeaAmHiIshb+pJBhllONc/qMNYTF9v+gKqtR
        w3XsHWWYtwMGyn/NxD3BwObss9ggx0MOQuF4f6f2NqvTsbKhUYGl86FVgfaqs1l1NkYK1Ewwamx9
        8LlbJ7KZAwyycISGDw19w5Tj+3jxCwAA//8DAAI6aHtJAQAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7c7e43c3299e3132-SOF
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 15 May 2023 20:52:28 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-gsghk4kr5xmbjprowdzr8zt2
      openai-processing-ms:
      - '815'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '89866'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 88ms
      x-request-id:
      - de6bee68ce2cb0df386f2ec71b499901
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read text from file, args:
      \"filename\": \"<filename>\"\n5. read_raw_file: Read file, args: \"filename\":
      \"<filename>\"\n6. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: () -> str\n11. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n12. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n13. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created and nothing new
      has happened."}, {"role": "user", "content": "Determine which next command to
      use, and respond using the format specified above:"}, {"role": "assistant",
      "content": "{\n    \"thoughts\": {\n        \"text\": \"I should start by reading
      the instructions_1.txt file using the read_file command.\",\n        \"reasoning\":
      \"The first step is to understand the instructions and what is required of me.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file.\",\n        \"criticism\":
      \"I need to ensure that I understand the instructions before proceeding.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4408'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6SSQYvbMBCF7/0VYs5ysNfpNutbeykLhUJJLluXIMtjW408MtKYDQ3+78Wxs2md
        Uhb2+mbmvW+kOYEpIQPdKNZtZ6MPn5+2H9XXT7unx+0u/fLrEMdYbb75IglJARJc8RM1zxMr7drO
        IhtHIEF7VIwlZMn9Zp1s0of1RkLrSrSQQd1xlK7eR9z7wkVxGicgoQ+qRshO0HnXdrxnd0AKkD3c
        JxKu3i96sr6TwI6VvUpJnA4SdOOMxgDZ9xO0GC6+3lmEDFQIJrAiHikdMdK4wSknIYTIgRvX1w2H
        HDIxi3MBjzyKOTwKQiwFO+FRlYIbFIYC+16PgGF/t+Iji8pYFH0wVJ87xtb9WdOubRWVqxzkn/4e
        VXBkqJ5Ctv9xHbGVoSCq3nOD/q9GwY1icWWsnLXueZnWWUVTUCR2Af+N+JoVl8baGzbahHb5Vkih
        93ih66lEP37DrbkosHIeReedRiwN1cuM0KE6XPyfjbVv/YjJfJCXI5grNzdAqsUp98VlgaZ8vTyd
        qTD2XsdvMS8QZ5CZJ6cBBgmVIROa/XQgkEFg14EEQyUeIYuHH8O73wAAAP//AwBQh5C9ugMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7c7e43cb8d2c3132-SOF
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 15 May 2023 20:52:38 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-gsghk4kr5xmbjprowdzr8zt2
      openai-processing-ms:
      - '10025'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86473'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.35s
      x-request-id:
      - f3965dabcf1a56d3abe0b97dd37818a9
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Your
      task is to create a concise running summary of actions and information results
      in the provided text, focusing on key and potentially important information
      to remember.\n\nYou will receive the current summary and the your latest actions.
      Combine them, adding relevant key information from the latest development in
      1st person past tense and keeping the summary concise.\n\nSummary So Far:\n\"\"\"\n{''role'':
      ''system'', ''content'': ''This reminds you of these events from your past:
      \\nI was created and nothing new has happened.''}\n\"\"\"\n\nLatest Development:\n\"\"\"\nNothing
      new happened.\n\"\"\"\n"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '713'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SPXUvDQBBF3/0VwzxvSmJqW/etFJRSfBD8qiJlm4xN7GZn2ZlapeS/S6Ha18u9
        h3MP2NZosWqcVl302fj29eFuG++f3OOikPFyMZu+xNnz8kY2RYkGef1JlZ4Wg4q76ElbDmiwSuSU
        arTFaDIsJuX1KDfYcU0eLW6iZuXgKtNdWnOWl3mBBnfiNoT2gDFxF3WlvKUgaIvL3OCZ/Z8fY2V1
        /twc5r3BquG2IkH7dsCO5I+a2BNadCKtqAt6dOSgFI7+UwEH8iNKnYE5JKqc96CNU5jD3gmc7oAL
        NWhDiaBxXwRrogCBIdAeavoiz7GjoALKkChy0gH2Bj/a0EqzSuSEA1oU5YgG21DTN9q8f+8vfgEA
        AP//AwCDczclewEAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7c7e441959f03132-SOF
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 15 May 2023 20:52:42 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-gsghk4kr5xmbjprowdzr8zt2
      openai-processing-ms:
      - '1498'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '89839'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 107ms
      x-request-id:
      - 61ac2d72f5c8a08789008f8ad509a4f1
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read text from file, args:
      \"filename\": \"<filename>\"\n5. read_raw_file: Read file, args: \"filename\":
      \"<filename>\"\n6. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: () -> str\n11. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n12. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n13. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nAs a system, I recall that I was
      created and there have been no new developments to report."}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step is to understand the instructions
      and what is required of me.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file.\",\n        \"criticism\": \"I need to
      ensure that I understand the instructions before proceeding.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains further instructions that I need to follow.\",\n        \"plan\": \"-
      Use the read_file command to read the instructions_2.txt file.\",\n        \"criticism\":
      \"I need to ensure that I understand the instructions before proceeding.\",\n        \"speak\":
      \"I will read the instructions_2.txt file using the read_file command.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_2.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Read the file instructions_3.txt"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5368'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6SSUW/TMBDH3/kU1j27VdNu3ZK38TAGEgKJIqQtqHKdS2LmnCP7wipV+e4oTUIg
        RQiJ17vz7/+zfScwGSSgS8W6qu3i5s3j7sOX+OF++3hXvd++bh7ud/ndx0/rOH73HSS4wzfUPJxY
        alfVFtk4Agnao2LMIIm2t1fR7SberiVULkMLCRQ1LzbL6wU3/uAWq80qAglNUAVCcoLau6rmPbtn
        pABJFF3fSJjgU+NqLYEdKzuV1nHcStClMxoDJE8nqDCMYO8sQgIqBBNYEXeajhipu8IpJSGESIFL
        1xQlhxQSMRSHBh65K6bwVhBiJtgJjyoTXKIwFNg3uhMM+82SjyxyY1E0wVBxnuhG9+eadlWlKFum
        IH/le1TBkaGiD9n9hdppK0NB5I3nEv1vg4JLxWJyzJ217mWeVltFfdBCfA74Z8V/ueIcrL1ho02o
        5m+FFBqPo11DGfruGy7h4oC58yhq7zRiZqiYZ4Qa1fPIfzHW/u9H9PBWjkswdC52gFSFfe5PykxN
        +WK+On2jm52OX2qOEmeRwSelFloJuSETyn2/IJBAYFeDBEMZHiFZtV/bVz8AAAD//wMAarkDSrsD
        AAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7c7e44259b713132-SOF
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 15 May 2023 20:52:52 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-gsghk4kr5xmbjprowdzr8zt2
      openai-processing-ms:
      - '9839'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86463'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.358s
      x-request-id:
      - d620e6b69245523ab217d979b4e6b8c5
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Your
      task is to create a concise running summary of actions and information results
      in the provided text, focusing on key and potentially important information
      to remember.\n\nYou will receive the current summary and the your latest actions.
      Combine them, adding relevant key information from the latest development in
      1st person past tense and keeping the summary concise.\n\nSummary So Far:\n\"\"\"\n{''role'':
      ''system'', ''content'': ''This reminds you of these events from your past:
      \\nAs a system, I recall that I was created and there have been no new developments
      to report.''}\n\"\"\"\n\nLatest Development:\n\"\"\"\nNothing new happened.\n\"\"\"\n"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '761'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SPyUoDQRRF935FcdfVIW1nsnZBQQ2CGxcOSKhUv6TLdA32e8HE0P8uESXbA/dw
        7hG+hoFrrLiQ22J6+/pkXyafD9/0eMnzcbh+3tZ368VifzP30EirD3Lytxi4FHJL4lOEhuvICtUw
        5WQ2KmfV1XSkEVJNLQw2WYpqMC5k161SMayGJTR2bDcEc0TuUsiylLSlyDBlVWqc3Wc+1pAktj2T
        0aTXcE3yjhjm7YhA/G/tUkswsMyexUY5NaYoFE/9c1ZW8YGFglb3qiNn21ZJY0XFJI2PGxXpSzWW
        VWNzpki1Yh8dqXBQv1d9igP0GmsfPTfLjiynCAOWlKHhY017mGH/3l/8AAAA//8DAIp+DXNmAQAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7c7e44729ae33132-SOF
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 15 May 2023 20:52:56 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-gsghk4kr5xmbjprowdzr8zt2
      openai-processing-ms:
      - '1279'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '89827'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 115ms
      x-request-id:
      - 108cd79db4a91eae5537da9b33f492bc
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read text from file, args:
      \"filename\": \"<filename>\"\n5. read_raw_file: Read file, args: \"filename\":
      \"<filename>\"\n6. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: () -> str\n11. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n12. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n13. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nAs a system, I recall that nothing
      new has happened since my creation."}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step is to understand the instructions
      and what is required of me.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file.\",\n        \"criticism\": \"I need to
      ensure that I understand the instructions before proceeding.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains further instructions that I need to follow.\",\n        \"plan\": \"-
      Use the read_file command to read the instructions_2.txt file.\",\n        \"criticism\":
      \"I need to ensure that I understand the instructions before proceeding.\",\n        \"speak\":
      \"I will read the instructions_2.txt file using the read_file command.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_2.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Read the file instructions_3.txt"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I need to read the instructions_3.txt file using the read_file command.\",\n        \"reasoning\":
      \"The instructions_3.txt file contains further instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file.\",\n        \"criticism\":
      \"I need to ensure that I understand the instructions before proceeding.\",\n        \"speak\":
      \"I will read the instructions_3.txt file using the read_file command.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_3.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Write the task_id into the file output.txt\nShutdown"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6279'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6yST2vcMBDF7/0UYs7yYtcbJ9G9lIUWAt0W2joYrTyxlZUlVxonC4u/e/GfxYlL
        D6G9vqeZ95P0zqBLEKBqSappTXT98cdeffpw/G4Od9nTgT7ffdmfnh53WWy+3QIHd3hERfPERrmm
        NUjaWeCgPErCEkSS3WyTm/T2OuPQuBINCKhaitLNVUSdP7goTuMEOHRBVgjiDK13TUsFuSPaACJJ
        twmHZfliZCkHciTNIl3F256Dqp1WGED8PEOD4bLYO4MgQIagA0lLA6azhHa4wjm3jDGWA9Wuq2oK
        OQg2i7OBJxrEHHbMIpaMHHv2mpBRjYxkOBa6ZNqSGwXXUdvRhk7EHrRB1gVtq9EZhwpyxagr1zTS
        lpsc+Ms0jzI4q201Re5rZNoG8p0aHiEwj7867ZE1+DaOdU5rpJ0iIvY14N8B/y1GeU1a6dCsXxBt
        6PywUxLbvQhQzntU9Oag0KI8XkKetTH/94+mqJ5f2jI7f5TFygYnilebVrDSV+ueTcZwdlmxYL6a
        X9fyfZpsL4Qj5Qyb2x56Dg/a6lAXU7FAQCDXAgdtSzyBiPv7/t1vAAAA//8DALNiCnsBBAAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7c7e447bcfeb3132-SOF
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 15 May 2023 20:53:07 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-gsghk4kr5xmbjprowdzr8zt2
      openai-processing-ms:
      - '10958'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86469'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.354s
      x-request-id:
      - 27a8792867dc32731b494d23250a8aec
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Your
      task is to create a concise running summary of actions and information results
      in the provided text, focusing on key and potentially important information
      to remember.\n\nYou will receive the current summary and the your latest actions.
      Combine them, adding relevant key information from the latest development in
      1st person past tense and keeping the summary concise.\n\nSummary So Far:\n\"\"\"\n{''role'':
      ''system'', ''content'': ''This reminds you of these events from your past:
      \\nAs a system, I recall that nothing new has happened since my creation.''}\n\"\"\"\n\nLatest
      Development:\n\"\"\"\nNothing new happened.\n\"\"\"\n"}], "temperature": 0,
      "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '740'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SPTUsDMRRF9/6KcNeZ0rHf2SmCWHBTKoIiJc08m+jkg3mv2lLmv0tF6fbAPZx7
        Qmhg4LwVF0tbze5f1mV2eAzxdtktj9PV13h1mKyX5flpdgeNvP0gJ3+LgcuxtCQhJ2i4jqxQA1NP
        5+N6PlrMFxoxN9TCYFekGg0mley7ba6Go2ENjT3bHcGcULoci2wkf1JimPp6qnFxX/hEQ7LY9kLG
        da/hfA6OGOb1hEj8b+1ySzCwzIHFJjk35iSUzv03rKziIwtFrR5UR862rRJvRaUsPqSdSvStvGXl
        bSmUqFEckiMVj+r3ashpgF7jPaTAftOR5ZxgwJILNEJq6AAz7N/6qx8AAAD//wMAecEeqGYBAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7c7e44cdfcc83132-SOF
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 15 May 2023 20:53:10 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-gsghk4kr5xmbjprowdzr8zt2
      openai-processing-ms:
      - '1138'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '89832'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 112ms
      x-request-id:
      - f0b536a2bcc40f0b21989941177bcbad
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read text from file, args:
      \"filename\": \"<filename>\"\n5. read_raw_file: Read file, args: \"filename\":
      \"<filename>\"\n6. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: () -> str\n11. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n12. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n13. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nAs a system, I recall that nothing
      new has happened since my creation."}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step is to understand the instructions
      and what is required of me.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file.\",\n        \"criticism\": \"I need to
      ensure that I understand the instructions before proceeding.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains further instructions that I need to follow.\",\n        \"plan\": \"-
      Use the read_file command to read the instructions_2.txt file.\",\n        \"criticism\":
      \"I need to ensure that I understand the instructions before proceeding.\",\n        \"speak\":
      \"I will read the instructions_2.txt file using the read_file command.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_2.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Read the file instructions_3.txt"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I need to read the instructions_3.txt file using the read_file command.\",\n        \"reasoning\":
      \"The instructions_3.txt file contains further instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file.\",\n        \"criticism\":
      \"I need to ensure that I understand the instructions before proceeding.\",\n        \"speak\":
      \"I will read the instructions_3.txt file using the read_file command.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_3.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Write the task_id into the file output.txt\nShutdown"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to write the task_id into the output.txt file
      using the write_to_file command.\",\n        \"reasoning\": \"The instructions
      require me to write the task_id into the output.txt file.\",\n        \"plan\":
      \"- Use the write_to_file command to write the task_id into the output.txt file.\",\n        \"criticism\":
      \"I need to ensure that I write the correct task_id into the output.txt file.\",\n        \"speak\":
      \"I will write the task_id into the output.txt file using the write_to_file
      command.\"\n    },\n    \"command\": {\n        \"name\": \"write_to_file\",\n        \"args\":
      {\n            \"filename\": \"output.txt\",\n            \"text\": \"2314\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command write_to_file returned: File written
      to successfully."}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}], "temperature": 0,
      "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '7262'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5ySy27bQAxF9/2KAddjw4YfibXLqnBRtCjaAEWqwBiPKGni0VAZUnEKQ/9eyJZj
        x23Rx5YE7z2X5A5cBgnY0oitaj+4env35TF/WnwkfKintx8+bT6/n83ePU3vljdfQQOtH9BKPzG0
        VNUexVEADTaiEcwgGc+vp+PryWIx0lBRhh4SKGoZTIazgTRxTYPRZDQGDQ2bAiHZQR2pqmUltMHA
        kIxn07mGk/hZY6xBSIw/leaLq1aDLclZZEi+7aBCPgpH8ggJGGbHYoJ0mBQEQxdhlwallEpBSmqK
        UjiFRPXFvoHP0hVTWKrSPKHqmTBTxnslJSoxvGEV8bFxETNFuapwqJaKS2p8pgJtFZeNqIy2QTXs
        QvEytjqqdbKVCdkwBX1uH9EwBReKVww5eU/bMwQXWGJju02xMiH7W8oLt9qbcDAaqFvG32MqoVOm
        SxUbnTjruDoyB8T9BAZuYqdqRP1hm2vMKeLeQ7qF/cqHazSb/7zN1nn/z5c5mLf6+DR956efCabC
        A9crpQt8E4vLdzu/+UHgpsuxz3DKxo21yJw33n9/odqT9YBpaKHVkLvguFwd5CABFqpBgwsZPkMy
        au/bNz8AAAD//wMAqcemK/wDAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7c7e44d668223132-SOF
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 15 May 2023 20:53:21 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - user-gsghk4kr5xmbjprowdzr8zt2
      openai-processing-ms:
      - '10500'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86473'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.35s
      x-request-id:
      - 3e4b1ed00d4d2de4b39db61f42246015
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3286'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6SSTW/aQBCG7/0VoznbCMsFUt+iSJWoeomU9lJXaFiP7S3rXXd3nEAR/73aGEgL
        FZde5+t93pnZo66wQNWSqK436WL59LhYh8/t42x3/5Wz2cPDz2yg54/5p/wZE3TrH6zk2DFRrusN
        i3YWE1SeSbjCIpvfvZ/ni3yWJdi5ig0W2PSS5pNZKoNfu3SaTzNMcAjUMBZ77L3relmJ27ANWCzy
        aYJvs8/xbJ4lKE7InEN3H7JDgqp1WnHA4tseOw6nsd4ZxgIpBB2ErERIZ4VtNLAvLQBAidK6oWkl
        lFjAMXhM8FZisMQlhNYNpoIg5AXWO/BMlbYNSMugbRA/qIgaVtlEtgK1NgzioGJh32nL8NKSAI1F
        MSO0YbC8lUmJyZ+qnik4q20zSj/dEIhmSMd5bZylonO/A21r5zuK5X8zjGVbgSDch0vh3pAdNVP4
        EsbqaHN11Oo6slUcGIO3jJelTeHektn94qu6W0QXQMpr0UqH7nQEy/wKwDYMPjaTwBKog9oZ417+
        dQ8gpQZPwmYHEZ/rWivNVszu0n/omTYnqRdtzH9c+2rTo9AhOT3dcZ1XP2ep45HhvPoLTPLN5auO
        iVj71n6NeYJ4BTnylPaAhwRrbXVoV+PrYYFBXI8JalvxFovp4fvh3W8AAAD//wMAa4jrZSkEAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ca981339872aa10-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 02:49:23 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '12546'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86493'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.337s
      x-request-id:
      - 0fd7ee0fe93ef38d279da345e7367fc6
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created and nothing new
      has happened."}, {"role": "user", "content": "Determine which next command to
      use, and respond using the format specified above:"}, {"role": "assistant",
      "content": "{\n    \"thoughts\": {\n        \"text\": \"I should start by reading
      the instructions_1.txt file to determine what actions to take next.\",\n        \"reasoning\":
      \"The instructions_1.txt file contains the necessary information to determine
      the next steps.\",\n        \"plan\": \"- Use the read_file command to read
      the instructions_1.txt file\\n- Analyze the instructions to determine the next
      steps\",\n        \"criticism\": \"I need to ensure that I am following the
      instructions accurately and efficiently.\",\n        \"speak\": \"I will start
      by reading the instructions_1.txt file to determine the next steps.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\r\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4463'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4ySQW8aMRCF7/0VozkvCLIpJHur1B4QaqVK5NJuhRzvwLqxx1t7VoEg/nvlZQkp
        iCrXmXnvfWPPDk2FBepaiXaNHUxni+9fbx8+V3Vr5u7my4/7+bd5nt/d/XkZLTBD//ibtPSKofau
        sSTGM2aoAymhCovx5O52kk/zySRD5yuyWOC6kUE+/DiQNjz6wSgfjTHDNqo1YbHDJnjXyFL8E3HE
        4n4yzfDk/VofJ0fxouypNM7zfYa69kZTxOLnDh3Fo2/wlrBAFaOJolgSpWchThvsSgYAKFFq365r
        iSUW0Bf7Bm0kFUtc1ARMGwHDUUKrExaYCOIhkKpAanrbisuboWwEVsbSEGYQa9/aCtpI3WSSLFMP
        tHdOcfWPTycqMXtLEkhFz4bXJ5wrcZAWVIZj58Wk02uELRhe+eBUBy4eKhIKzjD1YxuBKNTE8+DG
        Kj5kDuDhXfhXuMqSB/CJld2+0MXc/4jOgHQwYrSJ7kA1AybqAIhjG5JYCcxAOVh5a/2z4fVlnNK6
        DUrIbiHh02pltCEWuz3fPzakno5Rz8bad37itWMo8eC+z47X16svjo+Vo0Pwa9IZmwrr85s9NNLs
        SX6JcoToQHqekve4z3Bl2MR6ebg3LDCKbzBDwxVtsBjtf+0//AUAAP//AwC7HghxMwQAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ca981943804aa10-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 02:49:39 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '12905'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86464'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.356s
      x-request-id:
      - a4e14f0652013c53af07d6d7cdc9463d
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nAs a system, I recall that I was
      created and there have been no new developments to report."}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file to determine what actions
      to take next.\",\n        \"reasoning\": \"The instructions_1.txt file contains
      the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file to determine the next
      steps.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\r\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}, {"role":
      "assistant", "content": "{\n    \"thoughts\": {\n        \"text\": \"The next
      instruction is to read the instructions_2.txt file. I should use the read_file
      command to read the file.\",\n        \"reasoning\": \"The instructions_2.txt
      file contains the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will use the read_file command to read the instructions_2.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_2.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Read the file instructions_3.txt"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5544'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4ySQY/aQAyF7/0Vls8BQbMLq9x6aCvUy1aip6ZCw8RJpkw8YcbRQlH+ezUQli2I
        aq+233ufZ3xAU2CGulaim9aO5ovld/312/OkfNh2dr3ZTb5sn9Pl9nOl1lNM0K1/k5ZBMdauaS2J
        cYwJak9KqMBsOnt6mKXz9Oljgo0ryGKGVSujdPw4ks6v3WiSTqJZF1RFmB2w9a5pZSVuQxwwm06f
        5glezC+N2SxBcaLspZQ+pn2CunZGU8Ds5wEbCmdj7yxhhioEE0SxREzHQhxXOOQMAJCj1K6ragk5
        ZjAUhwbtJBZzXNYETDsBw0F8pyMWmADiwJMqQGp62wqrdCw7gdJYGsMCQu06W0AX6DgZJavYA+2a
        RnHxj89RlGPylsSTCo4NVxecO3EQF1SGw9GLScfX8HswXDrfqCO4OChIyDeGaRjbCQShNlwHt1bx
        KXMEP96Ff4crz3kEn1jZ/R+6mfsf0RWQ9kaMNqE5US2AiY4AxKHzUawEFqAaKJ217sVwdRuntO68
        ErJ7iPhUlkYbYrH76/1DS2pzjnox1r7zE+8dQ44n9z45X9+gvjk+Vg2dgl+TrtiUr65v9tSIsxf5
        LcoZ4ggy8OTcY59gadiEenW6N8wwiGsxQcMF7TCb9L/6D38BAAD//wMA4kH/FDQEAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ca981f6cdeaaa10-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 02:49:56 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '13771'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86449'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.367s
      x-request-id:
      - 7274eefc2f8ca180d18d471f1f234e01
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nAs a system, I recall that nothing
      new has happened since my creation."}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file to determine what actions
      to take next.\",\n        \"reasoning\": \"The instructions_1.txt file contains
      the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file to determine the next
      steps.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\r\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}, {"role":
      "assistant", "content": "{\n    \"thoughts\": {\n        \"text\": \"The next
      instruction is to read the instructions_2.txt file. I should use the read_file
      command to read the file.\",\n        \"reasoning\": \"The instructions_2.txt
      file contains the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will use the read_file command to read the instructions_2.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_2.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Read the file instructions_3.txt"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"The next instruction is to read the instructions_3.txt file. I should use
      the read_file command to read the file.\",\n        \"reasoning\": \"The instructions_3.txt
      file contains the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will use the read_file command to read the instructions_3.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_3.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Write the task_id into the file output.txt\r\nShutdown"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6578'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6STTWvbQBCG7/0Vw5xlY9d2bOvYFIovhdKUFqpgNquxtc1qRuyOsIPxfy+SbJQo
        oRRynY/3fWZn9oQuxxRtYdSWlR8tN3ffomg+L37e6G3+NexunxafFvzr8xdeYYLy8IesXjrGVsrK
        kzphTNAGMko5ptOb1fxmtpytVwmWkpPHFPeVjmbjxUjr8CCjyWwyxQTraPaE6QmrIGWlW5VH4ojp
        dLZeJNiL94nVPEEVNb4PLZbrc4K2EGcpYvr7hCXFq3AQT5iiidFFNawNprASNyOcMgYAyFALqfeF
        xgxTuAQvCTpqE8zwriBgOio4jhpq22CBi6ACh+CUQAsCNfFx63JwrNIGds4TSK1VrWM96hg2EAup
        fQ517Fra5q3Kti21UpaG8/9QHWeYPCcNZKKw432P+7Z0w1wQmKoKUgVn9IVri/VP836aNzkqb7hD
        GMGPd8w4sMkyHsH3otZcDjywtMGpsy6Wne8GmKiVJ451aPSNwgZMCTvxXg6O963Fs01GMNbWwSj5
        J2jgaLdz1hGrfxpOGCsyj1erg/P+Xbt8/Zyd1zm5HudF59Vtsimpw3jhO6A1YT886y7R1PYSPcaL
        /uEv+Dibzq+ELeUFNuMznhPcOXax2Ha3iClGlQoTdJzTEdPJ+f784S8AAAD//wMAkanDf3AEAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ca9825e8926aa10-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 02:50:13 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '14155'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86448'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.368s
      x-request-id:
      - 6618011a94c8d2d73f905e11279742af
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nAs a system, I recall that nothing
      new has happened since my creation."}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file to determine what actions
      to take next.\",\n        \"reasoning\": \"The instructions_1.txt file contains
      the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file to determine the next
      steps.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\r\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}, {"role":
      "assistant", "content": "{\n    \"thoughts\": {\n        \"text\": \"The next
      instruction is to read the instructions_2.txt file. I should use the read_file
      command to read the file.\",\n        \"reasoning\": \"The instructions_2.txt
      file contains the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will use the read_file command to read the instructions_2.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_2.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Read the file instructions_3.txt"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"The next instruction is to read the instructions_3.txt file. I should use
      the read_file command to read the file.\",\n        \"reasoning\": \"The instructions_3.txt
      file contains the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will use the read_file command to read the instructions_3.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_3.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Write the task_id into the file output.txt\r\nShutdown"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"The next instruction is to write the task_id into the
      file output.txt. I should use the write_to_file command to write the task_id
      into the file.\",\n        \"reasoning\": \"The write_to_file command is the
      appropriate command to use to write the task_id into the output.txt file.\",\n        \"plan\":
      \"- Use the write_to_file command to write the task_id into the output.txt file\\n-
      Shutdown\",\n        \"criticism\": \"I need to ensure that I am following the
      instructions accurately and efficiently.\",\n        \"speak\": \"I will use
      the write_to_file command to write the task_id into the output.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"output.txt\",\n            \"text\": \"2314\"\n        }\n    }\n}"}, {"role":
      "system", "content": "Command write_to_file returned: File written to successfully."},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '7672'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5SSTY/aMBCG7/0VozkbRJYFqtxQ1QMnqu1WPTQV8jqTxItjp56JWITy36tAEB/d
        Su117Hmedzw+oM0xRVNpMXXjRovV89Py03o93X/+spwli+X61T25/a/vX/18hgrDyysZGTrGJtSN
        I7HBo0ITSQvlmCbzj4/z6eIxmSusQ04OUywbGU3Hs5G08SWMJtNJggpb1iVhesAmhrqRjYQtee4B
        D4nCC/xyME0UShDtLqXF7KFTaKpgDTGmPw5YE5/BMTjCFDWzZdFe+pjBC/l+hEPmAQAylCq0ZSWc
        YQpDcTigN+mLGT5XBIX12oH1LLE1fS6wDBKAq1bysPNjWAFXoXU5tEwgFYFo3m6GQQhMqGvt85ue
        DNW1MZLm4K0vL9r3Gb26ItBNE0MTrb7FH/1/tzRO+5NgBN/+Neodw0Qr1liuT6AVeKLjffLcxp6p
        BVagayiCc2FnfXn0XL0fgzamjVrI7aG3UVFYY8mL299H5ob09qzaWef+641PpE6dNz7c+mPhXtd0
        ktxQ77LoWN7/levtDavTvIUzIAdujSHmonXH2S6d3ZAt8x12CgvrLVebEwlTZAkNKrQ+pzdMJ93P
        7sNvAAAA//8DAD5/N2e0AwAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ca982c97d0caa10-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 02:50:27 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '11247'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86446'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.368s
      x-request-id:
      - 6de56a4a30bcbcde1a14399232252d53
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created and nothing new
      has happened."}, {"role": "user", "content": "Determine which next command to
      use, and respond using the format specified above:"}, {"role": "assistant",
      "content": "{\n    \"thoughts\": {\n        \"text\": \"I should start by reading
      the instructions_1.txt file to determine what actions to take next.\",\n        \"reasoning\":
      \"The instructions_1.txt file contains the necessary information to determine
      the next steps.\",\n        \"plan\": \"- Use the read_file command to read
      the instructions_1.txt file\\n- Analyze the instructions to determine the next
      steps\",\n        \"criticism\": \"I need to ensure that I am following the
      instructions accurately and efficiently.\",\n        \"speak\": \"I will start
      by reading the instructions_1.txt file to determine the next steps.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4461'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5SSQW/bMAyF7/sVBM920MyZs/lWbJcARU/rNmAeAlWmba0SZUg06izIfx8cJ02X
        IMN2Jfn4Pkpvi6bCAnWrRLvOpsvVw7e7sPT37vaTltBk8Us1tJvuq/14f4cJ+sefpOWgmGnvOkti
        PGOCOpASqrCY5+8X+WKeL7IEna/IYoFNJ2k2e5dKHx59epPdzDHBPqqGsNhiF7zrZC3+iThi8SFf
        Jnja/VKf53mC4kXZU2meZbsEdeuNpojF9y06ise9wVvCAlWMJopiGSk9C/F4wbZkAIASpfV900os
        sYBD8dCgQcZiiZ9bAqZBwHCU0OsRC0wE8RBIVSAtvW7F9duZDAK1sTSDFTwba6GPtJ8bBeuxA9o7
        p7j6Y8teUmLymiOQip4NNyeYK2YwnqcMx/0uJj2+RdiA4doHp/bY4qEioeAM02FsEIhCXTw37qzi
        yTOFh3/Cv8JVlpzCLSu7+UUXc38jOgPSwYjRJrqJagVMtAcgjn0YxUpgBcpB7a31z4abSzuldR+U
        kN3AiE91bbQhFrs5vz92pJ6OVv/xideiUOK0fZccs3dQX0SPlaPJ+MXpjE2F5jyxU2OcPckvUY4Q
        e5ADT8k73CVYGzaxXU95wwKj+A4TNFzRgMXN7sfuzW8AAAD//wMANnJsjjEEAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ca9e9fcfc39463e-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 04:00:56 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '13391'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86465'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.356s
      x-request-id:
      - 4f791abbc43d82448ee903e7f4248a39
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nAs a system, I recall that I was
      created and there have been no new developments to report."}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file to determine what actions
      to take next.\",\n        \"reasoning\": \"The instructions_1.txt file contains
      the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file to determine the next
      steps.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}, {"role":
      "assistant", "content": "{\n    \"thoughts\": {\n        \"text\": \"The next
      instruction is to read the instructions_2.txt file. I will use the read_file
      command to read the file.\",\n        \"reasoning\": \"The instructions_2.txt
      file contains the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will use the read_file command to read the instructions_2.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_2.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Read the file instructions_3.txt"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5540'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5SST4/aQAzF7/0Uls8JArFkaW5VT9yqqlT9kwoNEyeZ3YknmnF2YVG+e5UQli2I
        qr3afn4/z7wDmhxT1JUSXTc2vl+tv22n+8/7XZt8elotlz+eHpbq49eX+fd1iRG67QNpGRUT7erG
        khjHGKH2pIRyTGfJ8i65myWL9xHWLieLKZaNxPPJIpbWb108nU9nGGEbVEmYHrDxrm5kI+6ROGA6
        my3vIzwvPzeSJEJxouy5NF/Muwh15YymgOnPA9YUTou9s4QpqhBMEMXSYzoW4v6EQ8YAABlK5dqy
        kpBhCmNxbNBO+mKGXyoCpp2A4SC+1T0WmADiwJPKQSp62wqb+UR2AoWxNIEVPBtroQ00zPWCTd8B
        7epacf7HlkGSYfSWw5MKjg2XZ5gbZtCfpwyHYReT7t/C78Fw4XytBmxxkJOQrw3TOLYTCEJNuDRu
        rOKjZwzrf8K/wZVlHMMHVnb/QldzfyO6ANLeiNEm1EeqFTDRAEAcWt+LlcAKVA2Fs9Y9Gy6v7ZTW
        rVdCdg89PhWF0YZY7P7y/tCQejxZ/ccn3opChsftXXTK3qi+ih6rmo7Gr04XbMqXl4k9NvrZs/wa
        5QQxgIw8GXfYRVgYNqHaHPOGKQZxDUZoOKcdptPuV/fuNwAAAP//AwDgiGKHMgQAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ca9ea62ecef463e-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 04:01:12 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '13317'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86449'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.367s
      x-request-id:
      - e3d967a8e255d8ef5adbe659cf7eb379
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nAs a system, I recall that nothing
      new has happened since my creation."}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file to determine what actions
      to take next.\",\n        \"reasoning\": \"The instructions_1.txt file contains
      the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file to determine the next
      steps.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}, {"role":
      "assistant", "content": "{\n    \"thoughts\": {\n        \"text\": \"The next
      instruction is to read the instructions_2.txt file. I will use the read_file
      command to read the file.\",\n        \"reasoning\": \"The instructions_2.txt
      file contains the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will use the read_file command to read the instructions_2.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_2.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Read the file instructions_3.txt"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"The next instruction is to read the instructions_3.txt file. I will use the
      read_file command to read the file.\",\n        \"reasoning\": \"The instructions_3.txt
      file contains the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will use the read_file command to read the instructions_3.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_3.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Write the task_id into the file output.txt\nShutdown"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6570'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6SSTY/TQAyG7/wKy+dp1dJPcl1AqtgTSyUEQdV04k2GJuPRjMNWqvLfUZJWod0V
        Au3VHr/PY41PaDNM0BRaTOXL0Wqz/Ro+fFse7vaftx+PD2X+Kd4/vL+/q+nXChXy/icZOU+MDVe+
        JLHsUKEJpIUyTKbL9Xw5ny5XC4UVZ1RigrmX0Wy8GEkd9jyazCZTVFhHnRMmJ/SBKy874QO5iMl0
        9m6hcAgfGuuFQmHR5VBarCeNQlOwNRQx+X7CiuIlOHBJmKCO0UbRTlpNdkKuXeGUOgCAFKXgOi8k
        ppjAuXhu0FHaYopfCgJHRwHrooTatFpgIwjDU7BCIAWB6HjY2QysE+4Kj7Yk4Fp8LWM5yhg28GTL
        EurYD3SjO+Fd99BwVWmX/UPmOEX1p2cgHdlZlw+yL0e3xgWB9j6wD1bLFbXT+it82OVFD19q1yuM
        YPuKHW8wNxQTrFhjY9WjNuCIukRysQ5tpBbYgK46hHV5l2k4BDLy3ztFT/pwIb36957DelajLsd4
        znl2i05X1GtccW9sdchvz7hvtG+HiEHjav726t/OpvOLYWd5lk1dg43CR+tsLHb99WGCUdijQusy
        OmIyaX40b34DAAD//wMATFQWamAEAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ca9eac7ae9d463e-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 04:01:31 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '15965'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86449'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.366s
      x-request-id:
      - 57af6ca12656ff7b06640897bf5fa81a
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read a file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nAs a system, I recall that nothing
      new has happened since my creation."}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file to determine what actions
      to take next.\",\n        \"reasoning\": \"The instructions_1.txt file contains
      the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will start by reading the instructions_1.txt file to determine the next
      steps.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}, {"role":
      "assistant", "content": "{\n    \"thoughts\": {\n        \"text\": \"The next
      instruction is to read the instructions_2.txt file. I will use the read_file
      command to read the file.\",\n        \"reasoning\": \"The instructions_2.txt
      file contains the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will use the read_file command to read the instructions_2.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_2.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Read the file instructions_3.txt"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"The next instruction is to read the instructions_3.txt file. I will use the
      read_file command to read the file.\",\n        \"reasoning\": \"The instructions_3.txt
      file contains the necessary information to determine the next steps.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file\\n- Analyze
      the instructions to determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I am following the instructions accurately and efficiently.\",\n        \"speak\":
      \"I will use the read_file command to read the instructions_3.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_3.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Write the task_id into the file output.txt\nShutdown"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"The next instruction is to write the task_id into the
      file output.txt. I will use the write_to_file command to write the task_id into
      the file.\",\n        \"reasoning\": \"The write_to_file command is the appropriate
      command to use to write the task_id into the output.txt file.\",\n        \"plan\":
      \"- Use the write_to_file command to write the task_id into the output.txt file\",\n        \"criticism\":
      \"I need to ensure that I am writing the correct task_id into the output.txt
      file.\",\n        \"speak\": \"I will use the write_to_file command to write
      the task_id into the output.txt file.\"\n    },\n    \"command\": {\n        \"name\":
      \"write_to_file\",\n        \"args\": {\n            \"filename\": \"output.txt\",\n            \"text\":
      \"2314\"\n        }\n    }\n}"}, {"role": "system", "content": "Command write_to_file
      returned: File written to successfully."}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '7648'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5SSW2vbQBBG3/srhnmWjR3fGr0FCsXQQCkNpKlCWK9G0tarXbEzquMa/feii+PY
        TaF9nd0955uZPaBJMUZdKNFlZUer9d23m4fd9svtryr//HC/mU948/Faf7r/kN5ihH7zg7QML8ba
        l5UlMd5hhDqQEkoxni7fz5fz6fJ6HmHpU7IYY17JaDZejKQOGz+azCZTjLBmlRPGB6yCLyt5Er8l
        xy3g6irCE/x0MFtEKF6UPZVWi1UToS680cQYfz9gSXwEB28JY1TMhkU5aWN6J+TaFg6JAwBIUApf
        54VwgjEMxeGAnqUtJvi1IMiMUxaMYwm1bnOBYRAPXNSS+p0bwxp2xlqomUAKAlG8fRraINC+LJVL
        z14kGL32BVLsnXH5Sfo2oxUXBKqqgq+CUef4zv93S2WV6wUjuPvXqBcMHYwYbbjsQWtwRN19clyH
        lqkE1lConx2tw6agrO1MDErrOighu4dWRFlmtCEndg8bynygTizG5fBWC1yR2h7V/z3zntREx/0P
        t/5Yv1Ml9ZIz6kUWFfLLn/N6mz3g5qXz0zS41pqYs9ra/UuqLtkQMHENNhFmxhkunnocxsjiK4zQ
        uJSeMZ40j8273wAAAP//AwDMrrkmxwMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7ca9eb3e2d62463e-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 04:01:45 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '11215'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86452'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.364s
      x-request-id:
      - f275967e047717519684fa4f70a50901
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n4. read_file: Read file, args: \"filename\":
      \"<filename>\"\n5. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n6. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n7.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n8. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n9.
      list_agents: List GPT Agents, args: () -> str\n10. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n11. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n12. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created and nothing new
      has happened."}, {"role": "user", "content": "Determine which next command to
      use, and respond using the format specified above:"}, {"role": "assistant",
      "content": "{\n    \"thoughts\": {\n        \"text\": \"I should start by reading
      the instructions_1.txt file using the read_file command.\",\n        \"reasoning\":
      \"The first step is to understand the instructions and what is required of me.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will start by reading the instructions
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Error: read_file()
      got an unexpected keyword argument ''config''"}, {"role": "user", "content":
      "Determine which next command to use, and respond using the format specified
      above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4421'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6STTY/TQAyG7/wKyxcuadWy3VJyRIgqJw4VYiWCqunEaYYm4zB22K6q/neUj3ZL
        EEjA1Z55/L7+OKHLMEZbGLVVXU5eJ58+fNus1xtdNPPVeymS9fEheZi9rfJ3G4yQd1/J6vBjarmq
        S1LHHiO0gYxShvF8uVosF6vVbBFhxRmVGOO+1snd9H6iTdjxZHY3m2OEjZg9YXzCOnBV61b5QF4w
        fnO/jPCZfY2/aonKaspraD5fzs4R2oKdJcH48wkrkgs3cEkYoxFxosZrq5K9km8dnFIPAJCiFtzs
        C5UUYxiCQ4KO2gZTTBSEqBLQwihoQRDIZNvclQSWq8r4DJyAZ4VHDgfn91AHrimUT1NIQApuygw0
        PEEjbbIllE60I8gVoQy2IHsAl3dPnBcNjW2bINv5VI8KXUk6OlGZphjdyg1khL3z+0Fzz7j5EEEC
        1nhohH7jQbkLgtNWVNcpmUKSg1PImMS/1J7Voh5dWYIn6nV302/fcQAjB8g5QN4ELSj85GOsui6N
        7wVP4OMg7L9bk6Z+Msi+WP870zeAke8/eRtZs8Gps06qYSCXPSjMd+rdUHbxcyMedpRzoHZdul25
        yhu3Tmoyhwu7m0bzbw0cbVVf4xxdDmRA/HIf3lTUl3+uN5Jown58V30ic4GscnjqAdeqXeVBQOrP
        eI4wd95Jse3XG2MU5RojdD6jI8az85fzix8AAAD//wMAf5TUuscEAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7caa98d2fdfb4781-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 06:00:22 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '17680'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86464'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.357s
      x-request-id:
      - 6160e69cf8e1a8de925b9f124e27af98
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. download_file: Download File, args: \"url\":
      \"<url>\", \"filename\": \"<filename>\"\n4. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n5. read_file: Read file, args: \"filename\":
      \"<filename>\"\n6. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: () -> str\n11. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n12. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n13. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3374'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4RSyY7TQBC98xWlOttRrCwz8Q2EQDmABAIBGqOoY5ftJu1uT1dZk0X+d+Q4ziBn
        NFxfLW+pOqHOMMa0VJJWtQnv1r8+vy/u60+yM4/v+PDl64fDKvr5Y//xOD9igG77h1K5TExSV9WG
        RDuLAaaelFCGcbS8ny8Xy9kqCrByGRmMsaglnE0WoTR+68LpbBphgA2rgjA+Ye1dVctG3I4sY3y3
        iAJ83n3Fo8UsQHGizBVaTedtgGnpdEqM8cMJK+JhrXeGMEbFrFmUlU6ks0K2M3BKLABAglK6piiF
        E4zhAl4KtJcOTHANXLrGZMCivMD2AJ5Upm0BUhJoy+KbtJPKm2gie4FcG4KGh46ue3PGUldVymaT
        BIN/qTwpdlbbouf7VhLk2rMAC9WgGcRBYzPynY/shhU68KlU0rV6emy0pwxcDhWNmWqjbE8Swnem
        l+V1dB34mr0ksSG8tcocjvSyoIyEfKVtX7a07+3wSFHqtehUczVkbYnOCshy47thJbCGvDHm8GoI
        W8qdJ6i9S4n667gR9TgNrkntBt4nbcz/L3w2P0mwX9MGwxtdorv5Iqsq6hmuMY9EKF+Mn68vdL3P
        47d3GESchVz0JLbFNsBcW83lpv8rjJHF1RigthntMZ62v9s3fwEAAP//AwBjfu16+wMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cab52102bd50c0f-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 08:06:46 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '15053'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86494'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.336s
      x-request-id:
      - 23c7e6bf9f3d77853b8e1942a2df807f
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. download_file: Download File, args: \"url\":
      \"<url>\", \"filename\": \"<filename>\"\n4. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n5. read_file: Read file, args: \"filename\":
      \"<filename>\"\n6. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: () -> str\n11. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n12. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n13. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created and nothing new
      has happened."}, {"role": "user", "content": "Determine which next command to
      use, and respond using the format specified above:"}, {"role": "assistant",
      "content": "{\n    \"thoughts\": {\n        \"text\": \"I should start by reading
      the instructions_1.txt file using the read_file command.\",\n        \"reasoning\":
      \"The first step is to understand the instructions and what is required of me.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will start by reading the instructions
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\r\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}], "temperature":
      0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4505'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4yST4/TMBDF73wKa85O1dI2u5sbQiBVQnvgn4QIqlx7kph1xsGeaFuqfHeUpN0u
        KQKuzzPv/WY8R7AGMtCVYl03LrnZfLn//G518+NtulmZokVzv9Bv3qM9fLCvQYLffUfNp46Z9nXj
        kK0nkKADKkYD2SK9XaXrdDW/k1B7gw4yKBtOlrN1wm3Y+WS+nC9AQhtViZAdoQm+bnjL/gEpQnZ3
        O5dw8X7SF+tUAntW7iItlmknQVfeaoyQfT1CjfHsG7xDyEDFaCMr4p7SEyP1ExxzEkKIHLjybVlx
        zCETJ/H0gHvuxRw2ghCNYC8CKiO4QmEpcmh1Dxi3L2e8Z1FYh6KNlsqhoi/dDpr2da3IzHKQz/0D
        qujJUjmGfPyLa4+tLMXBmHDPIiILX/zWILhSLC6shXfOP05TG6doDEzEp4h/Rv2fUfOcEvGKlDv8
        xKs60ZsYZAy1JXyGzdjECZEOlq22sZ4uGym2Ac9jFa1zB9GSwdD/5jWb2GHhA4omeI1ohn/wk+jp
        NmKD6uGc+2id++fYsxxGg06eL+i0tKsDIlXj6P204Em8CuX07saHvvbSfo1yhhhATjw5ddBJKCzZ
        WG3H64IMIvsGJFgyuIds3n3rXvwCAAD//wMAyq+XBvcDAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cab527f8bf10c0f-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 08:07:05 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '15852'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86470'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.353s
      x-request-id:
      - 4c928bc5c3c48e66798ea1045cfb739e
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. download_file: Download File, args: \"url\":
      \"<url>\", \"filename\": \"<filename>\"\n4. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n5. read_file: Read file, args: \"filename\":
      \"<filename>\"\n6. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: () -> str\n11. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n12. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n13. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nAs a system, I recall that nothing
      new has happened since my creation."}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step is to understand the instructions
      and what is required of me.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file\\n- Analyze the instructions and determine
      the next steps\",\n        \"criticism\": \"I need to ensure that I fully understand
      the instructions before proceeding to the next steps.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\r\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains the next set of instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will read the instructions_2.txt
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5505'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4ySyY7TQBCG7zxFq852lJCF4BvHEQqIZUCjMYra7bLdpF1ldZc1CZHfHTlOyOAg
        4FrL/3+1HMHmkICptJi6cfGru4d3/PD26+aj37xfZIvs9adDtlntPuzmX+4hAs6+o5Fzx8Rw3TgU
        ywQRGI9aMIdktlovVsvV4uU6gppzdJBA2Ug8nyxjaX3G8XQ+nUEEbdAlQnKExnPdyFZ4hxQgmc3W
        ywiu4tfEchWBsGh3Dc0Xsy4CU7E1GCB5PEKN4SLs2SEkoEOwQTRJj8kkSP0Ix5SUUioFqbgtKwkp
        JOocPCdwL30whTtFiLkSVh51rqRCZSmIb00PGLbziexFFdahaoOl8lTRl25PMcN1rSmfpBA91/eo
        A5OlcjD5/BfVHltbCidhwr2ogKK4+K1BSaVFXVkLdo6fxq6N0zQYxuo+4J9R/2fUNKVYvSHtDj/w
        pk71IjkK+toSPsMWbMKIyHgr1thQj5eNFFqPl7GK1rmDailH31/zlk1lWLBH1Xg2iPnpDjyyHm8j
        NKh3F98n69w/x56kMAh00eWDzku7eSDSNQ7avxY8ste+HP/dkOhrr+23KBeIE8iZJ6UOuggKSzZU
        2+G7IIEg3EAElnLcQzLtvnUvfgIAAP//AwAIQuI7+AMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cab52f2be800c0f-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 08:07:22 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '14662'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86464'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.357s
      x-request-id:
      - 7a42a43f8328febdc768c571efd61fd9
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. download_file: Download File, args: \"url\":
      \"<url>\", \"filename\": \"<filename>\"\n4. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n5. read_file: Read file, args: \"filename\":
      \"<filename>\"\n6. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: () -> str\n11. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n12. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n13. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nAs a system, I recall that nothing
      new has happened since my creation."}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step is to understand the instructions
      and what is required of me.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file\\n- Analyze the instructions and determine
      the next steps\",\n        \"criticism\": \"I need to ensure that I fully understand
      the instructions before proceeding to the next steps.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\r\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains the next set of instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will read the instructions_2.txt
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_3.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_3.txt file
      contains the next set of instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will read the instructions_3.txt
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_3.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Write the task_id
      into the file output.txt\r\nShutdown"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6500'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5RSTWvbQBS891cs77wydvwRo2NyCIbQ0sYtTapi1qsXaWPpPXX3CRuM/nuRZaNE
        pQdfZ/bNzA5zBJdCDDY3YsuqiG5Xz1/m5nl9v/7x8Hny9NM9fr3b3j68vdx9y+5BA2/f0Mr5YmS5
        rAoUxwQarEcjmEI8WSxni/liNptrKDnFAmLIKommo3kktd9yNJ6OJ6ChDiZDiI9QeS4r2QjvkALE
        k+lyqaEX74nFWIOwmKKH5rNlo8Hm7CwGiH8docRwEfZcIMRgQnBBDEkbk0mQ2i8cE1JKqQQk5zrL
        JSQQqzN4JvAgLZjAShFiqoTV3jtBJTkqMWG3calyJHwCuJaqlpEcRL26AlUdHGUn5nS0Ed6ccMtl
        aSgdJaDfu3k0gclR1lmuc1SOgvjatiUE5fFP7TyqEq/LMfSpCkOdRaS+B/x/wOtskoQi9ZTXkvKe
        BpbWO3HWhXLYJlKofatvRK3emVn2Hq1c/bdQodldTPauKK7rqZNq9GUZ5yL+GQaZEjuXD8UNwhif
        DTfVEe3bXqKP8eF+OMGb6WR2SXhKeQ6bUAONhldHLuSbbkQQQxCuQIOjFA8Qj5vfzae/AAAA//8D
        ALSN0UftAwAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cab535e4b000c0f-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 08:07:43 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '18718'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86463'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.358s
      x-request-id:
      - 3289401cda386d97f52a68ba74d172e2
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. download_file: Download File, args: \"url\":
      \"<url>\", \"filename\": \"<filename>\"\n4. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n5. read_file: Read file, args: \"filename\":
      \"<filename>\"\n6. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: () -> str\n11. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n12. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n13. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nAs a system, I recall that nothing
      new has happened since my creation."}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step is to understand the instructions
      and what is required of me.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file\\n- Analyze the instructions and determine
      the next steps\",\n        \"criticism\": \"I need to ensure that I fully understand
      the instructions before proceeding to the next steps.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\r\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains the next set of instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will read the instructions_2.txt
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_3.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_3.txt file
      contains the next set of instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will read the instructions_3.txt
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_3.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Write the task_id
      into the file output.txt\r\nShutdown"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I need to write the task_id into the output.txt file using the write_to_file
      command.\",\n        \"reasoning\": \"The instructions require me to write the
      task_id into the output.txt file.\",\n        \"plan\": \"- Use the write_to_file
      command to write the task_id into the output.txt file\\n- Shutdown\",\n        \"criticism\":
      \"I need to ensure that I write the correct task_id into the output.txt file.\",\n        \"speak\":
      \"I will write the task_id into the output.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"output.txt\",\n            \"text\": \"2314\"\n        }\n    }\n}"}, {"role":
      "system", "content": "Command write_to_file returned: File written to successfully."},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '7463'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA3SR267TMBBF3/mK0TynVcs5zYG8AUKiEgIhLgIRVLnONDF17OAZnxZV+XeUS2kb
        xOvYXmtvzwlNgRnqSomuGzt7WH97/6Gs5dXrxy/u+PVd+dEE2r5RD/T2ZYkJ+u1P0jK+mGtfN5bE
        eIcJ6kBKqMBsmT67T1fpfZomWPuCLGZYNjK7m69mEsPWzxZ3iyUmGFmVhNkJm+DrRjbi9+QYs+Xq
        +SLBC/xy8DRNULwoexk9LNM2QV15o4kx+37CmvgMDt4SZqiYDYty0sX0Tsh1FU65AwDIUSofy0o4
        xwzG4XhAR+mGOa7BERUgHriKUviDg8jGlSAVgSjeb8a4BNrXtXLFPMfkmhVIsXfGlQPwU0VgHEuI
        uqvIEOhXNIGgphuL2gkFOAQjNzZTgHHi+4GP0kSZy1FgZyxNxY1VbnDO4DPT/xNfeycM3fm14Xr6
        G+Q4ho6pBNZQqcee1mMLUNb2trFa0WsZtrTzgXpVX6rzTUNzQ2p/lh2MtZcfcf4wz3G43CbnHY4d
        /lmhUzUNnJvOE50K5XT711sbAC+6On2DS0WOWhPzLlr7+2+qPtkYMHcttgnujDNcbQYcZsjiG0zQ
        uIKOmC3aH+2TPwAAAP//AwDvf13ZiwMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cab53e3ac640c0f-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 08:08:01 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '14753'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86470'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.353s
      x-request-id:
      - 5ba2557b59153879f58caed6097cc928
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "user", "content": "Your
      task is to create a concise running summary of actions and information results
      in the provided text, focusing on key and potentially important information
      to remember.\n\nYou will receive the current summary and the your latest actions.
      Combine them, adding relevant key information from the latest development in
      1st person past tense and keeping the summary concise.\n\nSummary So Far:\n\"\"\"\n{''role'':
      ''system'', ''content'': ''This reminds you of these events from your past:
      \\nAs a system, I recall that nothing new has happened since my creation.''}\n\"\"\"\n\nLatest
      Development:\n\"\"\"\nNothing new happened.\n\"\"\"\n"}], "temperature": 0,
      "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '740'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA0SPQUsDMRBG7/6KMOds6drtKrmJoPaiUOqhiJQ0O91Ek0zYmVpL2f8uFaXXB9/j
        fScIHRhw3opLJVY3i/WL/7pfL1+3zdOiX6XyvNotH/hwbB7XoIG2H+jkbzFxlEpECZRBgxvQCnZg
        6va2aedtczvTkKjDCAb6ItVsMq9kP2ypms6mNWjYs+0RzAnKQKnIRugTM4Opr1sNF/eFzzUIiY0X
        0tSjBucpOGQwbydIyP/WgSKCAcscWGyWcyNlwXzuv2NlFR9ZMGm1UAM6G6MSb0VlEh9yrzIelLes
        vC0FM3aKQ3ao0lH9Xg2UJzBq2IUc2G8GtEwZDLBQAQ0hd/gNZjq+j1c/AAAA//8DAJlMxS5mAQAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cab544e7ad70c0f-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 08:08:05 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '1588'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '89832'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 112ms
      x-request-id:
      - 267617d003b7e1adf0b977a8fabcc152
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. download_file: Download File, args: \"url\":
      \"<url>\", \"filename\": \"<filename>\"\n4. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n5. read_file: Read file, args: \"filename\":
      \"<filename>\"\n6. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: () -> str\n11. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n12. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n13. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nAs a system, I recall that nothing
      new has happened since my creation."}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step is to understand the instructions
      and what is required of me.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file\\n- Analyze the instructions and determine
      the next steps\",\n        \"criticism\": \"I need to ensure that I fully understand
      the instructions before proceeding to the next steps.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\r\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains the next set of instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will read the instructions_2.txt
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_3.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_3.txt file
      contains the next set of instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will read the instructions_3.txt
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_3.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Write the task_id
      into the file output.txt\r\nShutdown"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I need to write the task_id into the output.txt file using the write_to_file
      command.\",\n        \"reasoning\": \"The instructions require me to write the
      task_id into the output.txt file.\",\n        \"plan\": \"- Use the write_to_file
      command to write the task_id into the output.txt file\\n- Shutdown\",\n        \"criticism\":
      \"I need to ensure that I write the correct task_id into the output.txt file.\",\n        \"speak\":
      \"I will write the task_id into the output.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"output.txt\",\n            \"text\": \"2314\"\n        }\n    }\n}"}, {"role":
      "system", "content": "Command write_to_file returned: File written to successfully."},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to shutdown using the task_complete command.\",\n        \"reasoning\":
      \"The instructions require me to shutdown after writing the task_id into the
      output.txt file.\",\n        \"plan\": \"- Use the task_complete command to
      shutdown\",\n        \"criticism\": \"I need to ensure that I have completed
      all the required tasks before shutting down.\",\n        \"speak\": \"I will
      shutdown now.\"\n    },\n    \"command\": {\n        \"name\": \"task_complete\",\n        \"args\":
      {\n            \"reason\": \"All tasks completed successfully.\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command task_complete returned: Error: task_complete()
      got an unexpected keyword argument ''config''"}, {"role": "user", "content":
      "Determine which next command to use, and respond using the format specified
      above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '8365'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA3SRTY/aMBCG7/0V1pwNArGwbG7tYbVc2h7aQ9tUyDiTxItjp54x0KL89yofLJCq
        17H9PO/rOYPJIAFdKtZVbSePm2+fXo03T5+/vzx/fK4OH+IBzXJ2OLyc/oAEv3tFzcOLqfZVbZGN
        dyBBB1SMGSTz1fphtVw9rJcSKp+hhQSKmieL6XLCMez8ZLaYzUFCJFUgJGeog69q3rLfoyNI5o+r
        pYQr/HqwmEtgz8peR+unVSNBl95oJEh+nKFCuoCDtwgJKCJDrBy3Mb1jdG2Fc+qEECIFLn0sSqYU
        EjEMhwM8cTtMYSMcYibYCyojZ/7oRCTjCsElCla03w5xUWhfVcpl0xTkLSugIu+MK3rglxKFccQh
        6rYiiYC/ogkoKryzqJwxiGMwfGczmTCOfTfwkevIUz6xyI3Fsbi2yvXOifhK+P/Et94RQ7d+baga
        /wY6iqFlKhYbUapDR+uwmVDWdrahWtZpSeww9wE7VVeq9Y1DU41qf5EdjbXXH3H+OE2hv9zIyw6H
        Dv+s0KkKe85d55FOhWK8/dut9YD3bZ2uwbUiRa2RKI/W/n5LdZvsks7lptv8uRmSp66BRkJunKFy
        23sgAWJfgwTjMjxBMmt+Nu/+AgAA//8DAA5l7gSkAwAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cab5458ef980c0f-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 08:08:17 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '12127'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86464'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.357s
      x-request-id:
      - b302d2efadeb267473fd996b8868baa4
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. download_file: Download File, args: \"url\":
      \"<url>\", \"filename\": \"<filename>\"\n4. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n5. read_file: Read file, args: \"filename\":
      \"<filename>\"\n6. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: () -> str\n11. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n12. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n13. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nI was created and nothing new
      has happened."}, {"role": "user", "content": "Determine which next command to
      use, and respond using the format specified above:"}, {"role": "assistant",
      "content": "{\n    \"thoughts\": {\n        \"text\": \"I should start by reading
      the instructions_1.txt file using the read_file command.\",\n        \"reasoning\":
      \"The first step is to understand the instructions and what is required of me.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will start by reading the instructions
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}], "temperature":
      0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4503'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4ySQW/bMAyF7/sVAs9yEM9N0/rWYZf2FAxbsWIuAkWiba0yZUh0my7wfx8cJ83m
        DNuuj9R7HynuwBrIQdeKddO6ZHn78HC3Wj3fx0/3ZUw/Lp7T5dcPN3cXvMo2IMFvvqPmw4uZ9k3r
        kK0nkKADKkYDeXp5dXG5WM6X1xIab9BBDlXLSTZbJNyFjU/m2TwFCV1UFUK+gzb4puU1+yekCPn1
        1VzCyftNTxeZBPas3ElKs6yXoGtvNUbIv+2gwXj0Dd4h5KBitJEV8UDpiZGGCXYFCSFEAVz7rqo5
        FpCLg3go4JYHsYBbQYhGsBcBlRFco7AUOXR6AIzr9zPesiitQ9FFS9W+Y2hd7zXtm0aRmRUgf/UP
        qKInS9UY8vkvrgO2shSFMsYOVeV+6xVcKxYnzNI751+mga1TNGYl4kvEP1P+z5RFQYm4IeVef+BZ
        nxhMDDKGxtJYJtyyiIxtnBDpYNlqG5vpnpFiF/A4Vtk59yo6MhiGjzxnExssfUDRBq8Rzf4L/CR6
        uo3Yono65r5Y5/459qyA0aCXx+M5LO3sdkg1OHq/LXgSr0I1PbmxMPSenp+jHCH2IAeegnroJZSW
        bKzX42FBDpF9CxIsGdxCPu8f+3c/AQAA//8DAD+LUFzyAwAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cab62dc2c772cd6-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 08:18:15 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '15623'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86470'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.353s
      x-request-id:
      - ca22ef5dc5ce19421b58ba25a7cc6230
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. download_file: Download File, args: \"url\":
      \"<url>\", \"filename\": \"<filename>\"\n4. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n5. read_file: Read file, args: \"filename\":
      \"<filename>\"\n6. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: () -> str\n11. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n12. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n13. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nAs a system, I recall that nothing
      new has happened since my creation."}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step is to understand the instructions
      and what is required of me.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file\\n- Analyze the instructions and determine
      the next steps\",\n        \"criticism\": \"I need to ensure that I fully understand
      the instructions before proceeding to the next steps.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains additional instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will read the instructions_2.txt
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5498'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: "{\n  \"error\": {\n    \"message\": \"That model is currently overloaded
        with other requests. You can retry your request, or contact us through our
        help center at help.openai.com if the error persists. (Please include the
        request ID 8857162b399f3215d19111fe4b45af81 in your message.)\",\n    \"type\":
        \"server_error\",\n    \"param\": null,\n    \"code\": null\n  }\n}\n"
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cab634de94c2cd6-DFW
      Connection:
      - keep-alive
      Content-Length:
      - '349'
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 08:18:47 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '30013'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86462'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.358s
      x-request-id:
      - 8857162b399f3215d19111fe4b45af81
    status:
      code: 429
      message: Too Many Requests
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. download_file: Download File, args: \"url\":
      \"<url>\", \"filename\": \"<filename>\"\n4. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n5. read_file: Read file, args: \"filename\":
      \"<filename>\"\n6. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: () -> str\n11. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n12. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n13. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nAs a system, I recall that nothing
      new has happened since my creation."}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step is to understand the instructions
      and what is required of me.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file\\n- Analyze the instructions and determine
      the next steps\",\n        \"criticism\": \"I need to ensure that I fully understand
      the instructions before proceeding to the next steps.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains additional instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will read the instructions_2.txt
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5498'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4ySQY/TMBCF7/wKa85O1ZLt7pIbWiFUOIDQIrTdoMq1p4mpPY7sibZLlf+O0rQU
        UgRc543f+2Y8e7AGCtC1Yu0bl90sHpaLO/J2vfxyv33nHl69mS7ffvzk7j68r0BCWH9DzccXEx18
        45BtIJCgIypGA8Xs+vbqen4zu5pK8MGggwKqhrN8Ms+4jeuQTfPpDCS0SVUIxR6aGHzDKw5bpATF
        bHb7UsLZ/CzMcwkcWLlzKc/nnQRdB6sxQfG4B4/pZByDQyhApWQTK+IeMxAj9SPsSxJCiBK4Dm1V
        cyqhEMfiUcAd98USFoIQjeAgIiojuEZhKXFsdQ+YVvmEdyw21qFok6Xq0NG3rg41HbxXZCYlyF/9
        I6oUyFI1hNz/xbXHVpaSUMbYXlXut17BtWJxxtwE58LTOLBxioasTHxO+GfK/5myLCkTr0m55+94
        0Sd6E4OM0VsaZMIdi8TYpBGRjpattsmP94yU2oinsTatc8+iJYOx/8hLNrHGTYgomhg0ojl8QRhF
        j7eRGlTbU+6Tde6fY09KGAw6eTqe49IuboeUx8H754JH8SpW45MbhL73/PwS5QRxADnylNRBJ2Fj
        yaZ6NRwWFJA4NCDBksEdFNPua/fiBwAAAP//AwBtNyCp8wMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cab6457ccc82cd6-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 08:19:15 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '15343'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86461'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.358s
      x-request-id:
      - 8006e46f4b0289aba262927d2a824f4f
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. download_file: Download File, args: \"url\":
      \"<url>\", \"filename\": \"<filename>\"\n4. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n5. read_file: Read file, args: \"filename\":
      \"<filename>\"\n6. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: () -> str\n11. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n12. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n13. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nAs a system, I recall that nothing
      new has happened since my creation."}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step is to understand the instructions
      and what is required of me.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file\\n- Analyze the instructions and determine
      the next steps\",\n        \"criticism\": \"I need to ensure that I fully understand
      the instructions before proceeding to the next steps.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains additional instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will read the instructions_2.txt
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_3.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_3.txt file
      contains additional instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will read the instructions_3.txt
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_3.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Write the task_id
      into the file output.txt\nShutdown"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6486'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5RSy27bMBC89yuIPdOGFUWxw2MPBQzklLRAHyoEhlpLjPlQyRXs1tC/F3oYdlT0
        4OvM7szsYk6gSxCgaknKNmax3n77Lsu3w5OhTajV709P2cfdy9c/NsueLXDwr2+oaNpYKm8bg6S9
        Aw4qoCQsQSQPm/uHbJ1kGw7Wl2hAQNXQIl1mC2rDq1+s0lUCHNooKwRxgiZ421BBfo8ugkjSzR2H
        i/iFyNYcyJM0V1D62HFQtdcKI4gfJ7AYz8LBGwQBMkYdSTrqY3pH6PoTTrljjLEcqPZtVVPMQbAJ
        nAg8Ug/msGUOsWTk2SFoQkY1MpJxX+iSaUd+AHxLTUtLOhLbaYOsjdpVAzMsFeSLAVfeWunKZQ78
        2i2gjN5pV42Wn2tk2kUKreqfEFnAX60OyCzelmPu0xjpRosF+xLx/wFvs5m5qKBJKx3t/IHoYht6
        SUlse6WvfAio6OZzYoNyfzY5aGNue80o1fFzGabb/+mCkxZHl3e/moWRoZrXaCT62YvEJca7/Xnr
        7tLk/pxwSDmFzV0HHYeddjrWxdgbEBDJN8BBuxKPIFbdz+7DXwAAAP//AwBOIskM4AMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cab64c7bd7f2cd6-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 08:19:33 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '15060'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86460'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.36s
      x-request-id:
      - ed373787c71c60e8a501ca60d5f29bfd
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. download_file: Download File, args: \"url\":
      \"<url>\", \"filename\": \"<filename>\"\n4. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n5. read_file: Read file, args: \"filename\":
      \"<filename>\"\n6. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: () -> str\n11. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n12. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n13. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nAs a system, I recall that nothing
      new has happened since my creation."}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step is to understand the instructions
      and what is required of me.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file\\n- Analyze the instructions and determine
      the next steps\",\n        \"criticism\": \"I need to ensure that I fully understand
      the instructions before proceeding to the next steps.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains additional instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will read the instructions_2.txt
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_3.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_3.txt file
      contains additional instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will read the instructions_3.txt
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_3.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Write the task_id
      into the file output.txt\nShutdown"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I need to write the task_id into the output.txt file using the write_to_file
      command.\",\n        \"reasoning\": \"The instructions require me to write the
      task_id into the output.txt file.\",\n        \"plan\": \"- Use the write_to_file
      command to write the task_id into the output.txt file\",\n        \"criticism\":
      \"I need to ensure that I write the correct task_id into the output.txt file.\",\n        \"speak\":
      \"I will write the task_id into the output.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"output.txt\",\n            \"text\": \"2314\"\n        }\n    }\n}"}, {"role":
      "system", "content": "Command write_to_file returned: File written to successfully."},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '7436'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5SSQY/TMBCF7/yK0ZzTaqPSdpUbIIQqJDigZbVLVpXrTBNTxw6e8XZRlf+O0iRt
        t4gD17H93vfe+ICmwAx1pUTXjZ0sVw+P4Su9/1h9uf92bx8Wz+puFz/vPzx+4u+YoN/8JC3Di6n2
        dWNJjHeYoA6khArM0sXt28V8mS7nCda+IIsZlo1MZtP5RGLY+MnN7CbFBCOrkjA7YBN83cha/I4c
        Y5bOb9MEz+Lng9kiQfGi7Hm0TJdtgrryRhNj9uOANfEoHLwlzFAxGxblpMP0Tsh1EQ65AwDIUSof
        y0o4xwyG4XBAL9INc1xBpZ4JBiYqQFkLUhGI4h1DoF/RBCrAb6GmKazAERUgHriKAoXfO4hsXHl6
        sx6lOs1auWKaY3LpHUixd8aVPcC7wc84lhB1Vwv3TBsiB1tvrd93XK44eYDhE/G1fGOV65UncMf0
        b65XIa5EdDBitOF6LGlMTY5j6ESVwH9VBxva+kBHR+n66lyv2bkhtRst98bai5ad309z7G+3ybjh
        IctfC3aqpl7oVfYrPxXK679xuaOLBR0TnZNy1JqYt9Ha3yeqI9kAmLsW2wS3xhmu1r0cZsjiG0zQ
        uIJeMLtpn9o3fwAAAP//AwBdP9zrqQMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cab6534ff212cd6-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 08:19:48 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '12675'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86466'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.355s
      x-request-id:
      - e50f8daf40e3d832eb8e97a2ae89c3c7
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. download_file: Download File, args: \"url\":
      \"<url>\", \"filename\": \"<filename>\"\n4. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n5. read_file: Read file, args: \"filename\":
      \"<filename>\"\n6. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: () -> str\n11. message_agent: Message GPT
      Agent, args: \"key\": \"<key>\", \"message\": \"<message>\"\n12. start_agent:
      Start GPT Agent, args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\",
      \"prompt\": \"<prompt>\"\n13. task_complete: Task Complete (Shutdown), args:
      \"reason\": \"<reason>\"\n\nResources:\n1. Internet access for searches and
      information gathering.\n2. Long Term memory management.\n3. GPT-3.5 powered
      Agents for delegation of simple tasks.\n4. File output.\n\nPerformance Evaluation:\n1.
      Continuously review and analyze your actions to ensure you are performing to
      the best of your abilities.\n2. Constructively self-criticize your big-picture
      behavior constantly.\n3. Reflect on past decisions and strategies to refine
      your approach.\n4. Every command has a cost, so be smart and efficient. Aim
      to complete tasks in the least number of steps.\n5. Write all code to a file.\n\nYou
      should only respond in JSON format as described below \nResponse Format: \n{\n    \"thoughts\":
      {\n        \"text\": \"thought\",\n        \"reasoning\": \"reasoning\",\n        \"plan\":
      \"- short bulleted\\n- list that conveys\\n- long-term plan\",\n        \"criticism\":
      \"constructive self-criticism\",\n        \"speak\": \"thoughts summary to say
      to user\"\n    },\n    \"command\": {\n        \"name\": \"command name\",\n        \"args\":
      {\n            \"arg name\": \"value\"\n        }\n    }\n} \nEnsure the response
      can be parsed by Python json.loads"}, {"role": "system", "content": "The current
      time and date is Tue Jan  1 00:00:00 2000"}, {"role": "system", "content": "This
      reminds you of these events from your past: \nAs a system, I recall that nothing
      new has happened since my creation."}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step is to understand the instructions
      and what is required of me.\",\n        \"plan\": \"- Use the read_file command
      to read the instructions_1.txt file\\n- Analyze the instructions and determine
      the next steps\",\n        \"criticism\": \"I need to ensure that I fully understand
      the instructions before proceeding to the next steps.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains additional instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will read the instructions_2.txt
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_3.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_3.txt file
      contains additional instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file\\n- Analyze
      the instructions and determine the next steps\",\n        \"criticism\": \"I
      need to ensure that I fully understand the instructions before proceeding to
      the next steps.\",\n        \"speak\": \"I will read the instructions_3.txt
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_3.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Write the task_id
      into the file output.txt\nShutdown"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I need to write the task_id into the output.txt file using the write_to_file
      command.\",\n        \"reasoning\": \"The instructions require me to write the
      task_id into the output.txt file.\",\n        \"plan\": \"- Use the write_to_file
      command to write the task_id into the output.txt file\",\n        \"criticism\":
      \"I need to ensure that I write the correct task_id into the output.txt file.\",\n        \"speak\":
      \"I will write the task_id into the output.txt file.\"\n    },\n    \"command\":
      {\n        \"name\": \"write_to_file\",\n        \"args\": {\n            \"filename\":
      \"output.txt\",\n            \"text\": \"2314\"\n        }\n    }\n}"}, {"role":
      "system", "content": "Command write_to_file returned: File written to successfully."},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I have completed all the tasks required of me. I need
      to shut down using the task_complete command.\",\n        \"reasoning\": \"All
      the instructions have been followed and the task is complete.\",\n        \"plan\":
      \"- Use the task_complete command to shut down\",\n        \"criticism\": \"I
      need to ensure that I have completed all the tasks required of me before shutting
      down.\",\n        \"speak\": \"I will shut down now.\"\n    },\n    \"command\":
      {\n        \"name\": \"task_complete\",\n        \"args\": {\n            \"reason\":
      \"All tasks completed successfully.\"\n        }\n    }\n}"}, {"role": "system",
      "content": "Command task_complete returned: Error: task_complete() got an unexpected
      keyword argument ''config''"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}], "temperature":
      0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '8368'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA3SRYWvbMBCGv+9XHPfZCUm7Jq2/tYVBSqGwMUo3j6BIF1uLLHm685It+L8Xx06T
        euzrSXre99Ht0RpMURdKdFm50Xzxoubzz89PD3eb+Lh7iC/P356+3P799HjvFCYYVj9JS/9irENZ
        ORIbPCaoIykhg+l0dv1xdjWf3kwTLIMhhynmlYwux1cjqeMqjCaXkykmWLPKCdM9VjGUlSwlbMgz
        ptP5bJbgCX46uJglKEGUO42uby6aBHURrCbG9PseS+IjOAZHmKJitizKS1szeCHfKuwzDwCQoRSh
        zgvhDFPoh/0B7aQdZrgAT2RAAnBRC5iw9VCz9TlIQSCKN8u+L4EOZam8GWeYnMMiKQ7e+rwj3jp3
        eGs9S6x168lQqN8EKyIP6+Bc2JIB5c1bBliGY8wQXznlO/IIvjL9v9c7iQFERytWWy6H1uS5ji1U
        CSy6mkeuAdWrtHEMkX7VNpKBsIaytVmHSIdEaf+rTR1254rU5hi5tc6d/bIP23GG3e0mOa6sd/ln
        Y16V1IHeuQ/yVMyHyz7f0dmCDkYnU661JuZ17dyft1aHZn3BzDfYJLi23nKx7HCYIkuoMEHrDe0w
        nTQ/mg+vAAAA//8DALuf5LJ6AwAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cab6593cf8d2cd6-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 08:20:04 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '13494'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86464'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.357s
      x-request-id:
      - 4134f636c7df0c1b064c0c773760b430
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. download_file: Download File, args: \"url\":
      \"<url>\", \"filename\": \"<filename>\"\n4. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n5. read_file: Read file, args: \"filename\":
      \"<filename>\"\n6. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: (config: autogpt.config.config.Config) ->
      str\n11. message_agent: Message GPT Agent, args: \"key\": \"<key>\", \"message\":
      \"<message>\"\n12. start_agent: Start GPT Agent, args: \"name\": \"<name>\",
      \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n13. task_complete:
      Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1. Internet
      access for searches and information gathering.\n2. Long Term memory management.\n3.
      GPT-3.5 powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n5. Write all code to a
      file.\n\nYou should only respond in JSON format as described below \nResponse
      Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '3410'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4RS0WrbQBB871cs+ywb2XHsRI8thBoKbSGl0KqYy2ktXX26O25XxMHo34tkyU4d
        l77Ozs3Mzu0BTYEZ6kqJroOdrNY/mkWZvv+eflw+xA93n+/DF5I18aevDytM0D/9Ji3Di6n2dbAk
        xjtMUEdSQgVms+XdYrmcz1fzBGtfkMUMyyCTm+ntRJr45CfpTTrDBBtWJWF2wBB9HWQjfkeOMVst
        0wTP2id8drtIULwoe4LuZ4s2QV15o4kx+3nAmniUjd4SZqiYDYty0oX0Tsh1CxxyBwCQo1S+KSvh
        HDMYwGFAe+nAHNfAlW9sASwqCjy9QCRVGFeCVATGscRGd1F5M5vKXmBrLEHDI6Njb3pM+7pWrpjm
        mLy2iqTYO+PKo99jRbA1kQVYKIBxsPXW+udrjmAYxPcW3ayewuM1x55WEagQog/RKDmPtj6CVB1B
        8e4yWrDKHVNN4BvT9X1eJ/hXH5fCOhox2nA9duyIeiFy3MTOSAmsQdV/la19jKSHhnvnE61bjKJ9
        gaAiX6vqMgEHUrvR/dlY+///HTc5yrTJeERDD29uyKmajg6nzi5CqFhent5x0HHPz9+WOobogwx5
        ctdim+DWOMPV5nhVmCGLD5igcQXtMUvbX+27PwAAAP//AwAeEXpL+QMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cabe1a14f03e863-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 09:44:48 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '16311'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86494'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.336s
      x-request-id:
      - 6bc353250226d58ec344d43af0da726a
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. download_file: Download File, args: \"url\":
      \"<url>\", \"filename\": \"<filename>\"\n4. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n5. read_file: Read file, args: \"filename\":
      \"<filename>\"\n6. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: (config: autogpt.config.config.Config) ->
      str\n11. message_agent: Message GPT Agent, args: \"key\": \"<key>\", \"message\":
      \"<message>\"\n12. start_agent: Start GPT Agent, args: \"name\": \"<name>\",
      \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n13. task_complete:
      Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1. Internet
      access for searches and information gathering.\n2. Long Term memory management.\n3.
      GPT-3.5 powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n5. Write all code to a
      file.\n\nYou should only respond in JSON format as described below \nResponse
      Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created and nothing new has happened."}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step in following the instructions
      is to read them. The read_file command is the appropriate command for this task.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file.\",\n        \"criticism\":
      \"I need to ensure that I am reading the correct file and that I am properly
      parsing the instructions.\",\n        \"speak\": \"I will start by reading the
      instructions file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}], "temperature":
      0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4537'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4ySTY/aQAyG7/0Vls8DImyhS25cVmWl9lLaSm0qNExMMkvmozOOoEL571USvsRy
        4Gq/fv28Mz6gzjFFVUpWxleDT4tf9ddv65fxy/x18zxbFrNk9+Xnq3/7/GM+R4Fu/UaKjxND5Yyv
        iLWzKFAFkkw5psn0+eN0Oh7PEoHG5VRhioXnwdNwMuA6rN1g9DRKUGAdZUGYHtAHZzyv2G3JRkxn
        s5HAi/e5nkwnAtmxrC6lZDJpBKrSaUUR098HNBRPvsFVhCnKGHVkabmldJbJtgkOmQUAyJBLVxcl
        xwxTOBaPDdpzW8xwWRJY2jNoGznUqsUCHYEdBJI5cEmw0RVd9+NqPOQ9D2EBO11VUEfqdO3AqhMr
        Z4y0+ZWLjp3NMENxDRJIRme1LS4014sg0N9aBwJDjxEt72K0eUoC6X1wPmjJl9bGhZ6OZdze0vlK
        2h5sAN8fCHmP6W5sFTRrpaPp3RdgiTojsrEO7SLJsABpOmdti85cuRBI9Y7QbT7L2mAUqn/gZYgn
        /TXMLUH0JLen7d0vWrd7JEdv0ojTjR1f4d2JWWmo9z+/2A2CDMXtZfaNVnsZf49yguhAjjyZbbAR
        uNFWx3LVnxWmGNl5FKhtTntMR82f5sN/AAAA//8DAMfpEF8ZBAAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cabe2169a45e863-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 09:45:09 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '18959'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86470'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.352s
      x-request-id:
      - 596c1b7b15d567c59a22f88ca982e173
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. download_file: Download File, args: \"url\":
      \"<url>\", \"filename\": \"<filename>\"\n4. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n5. read_file: Read file, args: \"filename\":
      \"<filename>\"\n6. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: (config: autogpt.config.config.Config) ->
      str\n11. message_agent: Message GPT Agent, args: \"key\": \"<key>\", \"message\":
      \"<message>\"\n12. start_agent: Start GPT Agent, args: \"name\": \"<name>\",
      \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n13. task_complete:
      Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1. Internet
      access for searches and information gathering.\n2. Long Term memory management.\n3.
      GPT-3.5 powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n5. Write all code to a
      file.\n\nYou should only respond in JSON format as described below \nResponse
      Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nAs
      a system, I recall that nothing new has happened since my creation."}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I should start by reading the instructions_1.txt file
      using the read_file command.\",\n        \"reasoning\": \"The first step in
      following the instructions is to read them. The read_file command is the appropriate
      command for this task.\",\n        \"plan\": \"- Use the read_file command to
      read the instructions_1.txt file.\",\n        \"criticism\": \"I need to ensure
      that I am reading the correct file and that I am properly parsing the instructions.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"The next instruction is to read the file instructions_2.txt.
      I will use the read_file command to read this file.\",\n        \"reasoning\":
      \"The instructions require me to read the file instructions_2.txt. The read_file
      command is the appropriate command for this task.\",\n        \"plan\": \"-
      Use the read_file command to read the instructions_2.txt file.\",\n        \"criticism\":
      \"I need to ensure that I am reading the correct file and that I am properly
      parsing the instructions.\",\n        \"speak\": \"I will now read the instructions_2.txt
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5571'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4yST2/aQBDF7/0UozkvCANxW58rVbRVT0mVtK7QZj3YW7x/ujsWNMjfvbINMSIc
        uM6befN7u3NAXWCGqpKsjK8n71c/G/30mD658HX5+XH+/eFTfAkvyf7Ht90XFOie/5Di48RUOeNr
        Yu0sClSBJFOBWZJ+WKbpfJHMBRpXUI0Zlp4ni+ndhJvw7CazxSxBgU2UJWF2QB+c8bxmtyUbMUvm
        s6XA0XwU0juB7FjWY2mRfmwFqsppRRGzXwc0FE/GwdWEGcoYdWRpucN0lsl2EQ65BQDIkSvXlBXH
        HDM4Fo8C7bkr5nhfEVjaM2gbOTSqwwIdgR0EkgVwRbDRNZ3rcb2Y8p6nsIKdrmtoIvV93cC6b1bO
        GGmLMxcde5tpjuIcJJCMzmpbjjTniyDQ30YHAkO3Ed1fxejyVATS++B80JJHaePCQMcybi/pfC3t
        ADaBhxtCXmO6GlsFzVrpaAb3FVii3ohsbEK3SDKsQJreWduyN1cuBFKDI/SbX9u6YBTqf+BliKf+
        c5hLguhJbk/b+1+0bndLjsGkFacbO77CmxOz0tDg//piFwgylJeXOQhd7zj+FuUE0YMceXLbYitw
        o62O1Xo4K8wwsvMoUNuC9pjN2t/tu/8AAAD//wMA+xz/CxoEAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cabe29d7b53e863-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 09:45:29 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '16951'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86464'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.356s
      x-request-id:
      - 1d037c5671afcbbf89705ef9e5d92d74
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. download_file: Download File, args: \"url\":
      \"<url>\", \"filename\": \"<filename>\"\n4. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n5. read_file: Read file, args: \"filename\":
      \"<filename>\"\n6. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: (config: autogpt.config.config.Config) ->
      str\n11. message_agent: Message GPT Agent, args: \"key\": \"<key>\", \"message\":
      \"<message>\"\n12. start_agent: Start GPT Agent, args: \"name\": \"<name>\",
      \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n13. task_complete:
      Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1. Internet
      access for searches and information gathering.\n2. Long Term memory management.\n3.
      GPT-3.5 powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n5. Write all code to a
      file.\n\nYou should only respond in JSON format as described below \nResponse
      Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nAs
      a system, I recall that nothing new has happened since my creation."}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I should start by reading the instructions_1.txt file
      using the read_file command.\",\n        \"reasoning\": \"The first step in
      following the instructions is to read them. The read_file command is the appropriate
      command for this task.\",\n        \"plan\": \"- Use the read_file command to
      read the instructions_1.txt file.\",\n        \"criticism\": \"I need to ensure
      that I am reading the correct file and that I am properly parsing the instructions.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"The next instruction is to read the file instructions_2.txt.
      I will use the read_file command to read this file.\",\n        \"reasoning\":
      \"The instructions require me to read the file instructions_2.txt. The read_file
      command is the appropriate command for this task.\",\n        \"plan\": \"-
      Use the read_file command to read the instructions_2.txt file.\",\n        \"criticism\":
      \"I need to ensure that I am reading the correct file and that I am properly
      parsing the instructions.\",\n        \"speak\": \"I will now read the instructions_2.txt
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"The next instruction is to read the file instructions_3.txt.
      I will use the read_file command to read this file.\",\n        \"reasoning\":
      \"The instructions require me to read the file instructions_3.txt. The read_file
      command is the appropriate command for this task.\",\n        \"plan\": \"-
      Use the read_file command to read the instructions_3.txt file.\",\n        \"criticism\":
      \"I need to ensure that I am reading the correct file and that I am properly
      parsing the instructions.\",\n        \"speak\": \"I will now read the instructions_3.txt
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_3.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Write the task_id
      into the file output.txt\nShutdown"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6598'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6SSTWvbQBCG7/0Vw5xlY1muY3RrL8WFUijppVUx69VY2lq7o+6OYoPRfy/6MEqc
        BBp6nY/3febjgibHFHWpRNu6mt1tfzws7cO3Tx/21de7svp80seCwsck/uIKjJD3v0nL2DHXbOuK
        xLDDCLUnJZRjGq83q/V6mSTLCC3nVGGKRS2zZP5+Jo3f82yRLGKMsAmqIEwvWHu2teyEj+QCpvEq
        Xkc4iU+JzSZCYVHVFFovVm2EumSjKWD684KWwlXYc0WYogrBBFFOOkx2Qq4b4ZI5AIAMpeSmKCVk
        mMIYHBN0li6Y4X1J4OgsYFwQ3+gOC0wAYTh5IwRSEogKx53JwTjhPnAwFQE3Ujcyl7PMYQsnU1XQ
        hKGhb90J7/pCzdYql/+D5jzD6DGnJxXYGVdMsI84A3j60xhPYOmtwPevUnbDlwSqrj3X3iiZUgf2
        IGVXoMLxlrWulBswZ/D9P/YwUb64Eu2NGG2CHby24Ih6SXKh8Z2mEtiCsr2HcUUvqtl70t2VD+yt
        6q88+l1TL5mFmtTxatRf2PHpbfCDXBtdf3JcwrOXdMrS4PRkaTdAyhe33zwkutpJYsJ40v/8+cdb
        9jMEWCbx6krcU4/wmWuxjfBgnAnlbnhKTDEI1xihcTmdMV20v9p3fwEAAP//AwBqf6utdwQAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cabe317dd2ae863-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 09:45:50 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '18421'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86464'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.356s
      x-request-id:
      - 594a2cfdb66db488a74175cfeba1c7b7
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. download_file: Download File, args: \"url\":
      \"<url>\", \"filename\": \"<filename>\"\n4. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n5. read_file: Read file, args: \"filename\":
      \"<filename>\"\n6. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: (config: autogpt.config.config.Config) ->
      str\n11. message_agent: Message GPT Agent, args: \"key\": \"<key>\", \"message\":
      \"<message>\"\n12. start_agent: Start GPT Agent, args: \"name\": \"<name>\",
      \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n13. task_complete:
      Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1. Internet
      access for searches and information gathering.\n2. Long Term memory management.\n3.
      GPT-3.5 powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n5. Write all code to a
      file.\n\nYou should only respond in JSON format as described below \nResponse
      Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nAs
      a system, I recall that nothing new has happened since my creation."}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I should start by reading the instructions_1.txt file
      using the read_file command.\",\n        \"reasoning\": \"The first step in
      following the instructions is to read them. The read_file command is the appropriate
      command for this task.\",\n        \"plan\": \"- Use the read_file command to
      read the instructions_1.txt file.\",\n        \"criticism\": \"I need to ensure
      that I am reading the correct file and that I am properly parsing the instructions.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"The next instruction is to read the file instructions_2.txt.
      I will use the read_file command to read this file.\",\n        \"reasoning\":
      \"The instructions require me to read the file instructions_2.txt. The read_file
      command is the appropriate command for this task.\",\n        \"plan\": \"-
      Use the read_file command to read the instructions_2.txt file.\",\n        \"criticism\":
      \"I need to ensure that I am reading the correct file and that I am properly
      parsing the instructions.\",\n        \"speak\": \"I will now read the instructions_2.txt
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"The next instruction is to read the file instructions_3.txt.
      I will use the read_file command to read this file.\",\n        \"reasoning\":
      \"The instructions require me to read the file instructions_3.txt. The read_file
      command is the appropriate command for this task.\",\n        \"plan\": \"-
      Use the read_file command to read the instructions_3.txt file.\",\n        \"criticism\":
      \"I need to ensure that I am reading the correct file and that I am properly
      parsing the instructions.\",\n        \"speak\": \"I will now read the instructions_3.txt
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_3.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Write the task_id
      into the file output.txt\nShutdown"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"The next instruction is to write the task_id into the file output.txt. I will
      use the write_to_file command to write the task_id into the file.\",\n        \"reasoning\":
      \"The instructions require me to write the task_id into the file output.txt.
      The write_to_file command is the appropriate command for this task.\",\n        \"plan\":
      \"- Use the write_to_file command to write the task_id into the output.txt file.\",\n        \"criticism\":
      \"I need to ensure that I am writing the correct information to the correct
      file.\",\n        \"speak\": \"I will now write the task_id into the output.txt
      file.\"\n    },\n    \"command\": {\n        \"name\": \"write_to_file\",\n        \"args\":
      {\n            \"filename\": \"output.txt\",\n            \"text\": \"This task_id
      is 2314\"\n        }\n    }\n}"}, {"role": "system", "content": "Command write_to_file
      returned: File written to successfully."}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '7699'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6SST4/TQAzF73wKy+dJ1dJuu+S2QgL1UkCUA0tQNTtxkyGZP8w4bKHKd0fptLQq
        5cTVz+/5Z9l71CXmqGrJyvg2Wywff6xWrz++e5g9zn7dv/m8etUsymY7qVv5AQW6p2+k+OgYKWd8
        S6ydRYEqkGQqMZ/M72fz+cvp3VSgcSW1mGPlOZuO7jLuwpPLxtPxBAV2UVaE+R59cMbzhl1DNg4B
        s7nAc/hZmI0FsmPZnkuL+3kvUNVOK4qYf9mjoXgKDq4lzFHGqCNLywOms0x2WGFfWACAArl2XVVz
        LDCHY/Eo0I6HYoHrmsDSjkHbyKFTAxboCOygpJaYgGsCWZHlESzhWbctdDFVU8PmIIJyxkhb3jQW
        KC6nB5LRWW2rM8LF9AiBvnc6EBi6jbH+1+yBe2jzPjgftGT6I21dAK6HBhmbayDfSptYMvj0n8up
        oFkrHU0KXIIlOhjJxi4MRsmwBGlSkrbVIUu5EEjx7czoSTanvMMJrHu+RZJMvTg9wJH7r/tbaSjl
        Xa55NVWG6vpzktDQz2R++36dPSTnuac/QhS2x17gVlsd6026OeYY2XkUqG1JO8zH/df+xW8AAAD/
        /wMAA2Jd26wDAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cabe39ca878e863-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 09:46:09 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '15587'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86466'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.356s
      x-request-id:
      - 2949365c0262a058c1fbb11ef65bbd46
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. download_file: Download File, args: \"url\":
      \"<url>\", \"filename\": \"<filename>\"\n4. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n5. read_file: Read file, args: \"filename\":
      \"<filename>\"\n6. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: (config: autogpt.config.config.Config) ->
      str\n11. message_agent: Message GPT Agent, args: \"key\": \"<key>\", \"message\":
      \"<message>\"\n12. start_agent: Start GPT Agent, args: \"name\": \"<name>\",
      \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n13. task_complete:
      Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1. Internet
      access for searches and information gathering.\n2. Long Term memory management.\n3.
      GPT-3.5 powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n5. Write all code to a
      file.\n\nYou should only respond in JSON format as described below \nResponse
      Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nAs
      a system, I recall that nothing new has happened since my creation."}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I should start by reading the instructions_1.txt file
      using the read_file command.\",\n        \"reasoning\": \"The first step in
      following the instructions is to read them. The read_file command is the appropriate
      command for this task.\",\n        \"plan\": \"- Use the read_file command to
      read the instructions_1.txt file.\",\n        \"criticism\": \"I need to ensure
      that I am reading the correct file and that I am properly parsing the instructions.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"The next instruction is to read the file instructions_2.txt.
      I will use the read_file command to read this file.\",\n        \"reasoning\":
      \"The instructions require me to read the file instructions_2.txt. The read_file
      command is the appropriate command for this task.\",\n        \"plan\": \"-
      Use the read_file command to read the instructions_2.txt file.\",\n        \"criticism\":
      \"I need to ensure that I am reading the correct file and that I am properly
      parsing the instructions.\",\n        \"speak\": \"I will now read the instructions_2.txt
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"The next instruction is to read the file instructions_3.txt.
      I will use the read_file command to read this file.\",\n        \"reasoning\":
      \"The instructions require me to read the file instructions_3.txt. The read_file
      command is the appropriate command for this task.\",\n        \"plan\": \"-
      Use the read_file command to read the instructions_3.txt file.\",\n        \"criticism\":
      \"I need to ensure that I am reading the correct file and that I am properly
      parsing the instructions.\",\n        \"speak\": \"I will now read the instructions_3.txt
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_3.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Write the task_id
      into the file output.txt\nShutdown"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"The next instruction is to write the task_id into the file output.txt. I will
      use the write_to_file command to write the task_id into the file.\",\n        \"reasoning\":
      \"The instructions require me to write the task_id into the file output.txt.
      The write_to_file command is the appropriate command for this task.\",\n        \"plan\":
      \"- Use the write_to_file command to write the task_id into the output.txt file.\",\n        \"criticism\":
      \"I need to ensure that I am writing the correct information to the correct
      file.\",\n        \"speak\": \"I will now write the task_id into the output.txt
      file.\"\n    },\n    \"command\": {\n        \"name\": \"write_to_file\",\n        \"args\":
      {\n            \"filename\": \"output.txt\",\n            \"text\": \"This task_id
      is 2314\"\n        }\n    }\n}"}, {"role": "system", "content": "Command write_to_file
      returned: File written to successfully."}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"The next instruction is to delete the agent. I will use the delete_agent command
      to delete the agent.\",\n        \"reasoning\": \"The instructions require me
      to delete the agent. The delete_agent command is the appropriate command for
      this task.\",\n        \"plan\": \"- Use the delete_agent command to delete
      the agent.\",\n        \"criticism\": \"I need to ensure that I am deleting
      the correct agent.\",\n        \"speak\": \"I will now delete the agent.\"\n    },\n    \"command\":
      {\n        \"name\": \"delete_agent\",\n        \"args\": {\n            \"key\":
      \"GPT-Agent\"\n        }\n    }\n}"}, {"role": "system", "content": "Command
      delete_agent returned: Error: invalid literal for int() with base 10: ''GPT-Agent''"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '8625'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5STTW/TQBCG7/yK0ZydKGloWnyrkKgibqiAAFfRxJ7YS9Y7y+44LUT+78iNnVSB
        FHFaaT6eeWf33R2aAlPMK9K89nZ0tfi6Xd+Q/fLJ/8hvVs18Q59X4fb9rw+L23eYoKy+c659xziX
        2ltWIw4TzAOTcoHpdH79ej6/mF1NE6ylYIspll5Hs/HlSJuwktFkNpligk2kkjHdoQ9Se12qbNhF
        TKfXszcJHuHHxHyeoIqSPYQuJpPLNsG8EpNzxPTbDmuOAziIZUyRYjRRyWknU5yy61bYZQ4AIEOt
        pCkrjRmm0Af7BD9qF8zwrmLwgbdGmgi51DW5AgJrExwXQA44BAljWMCDsRasiQpaMdCWjKWVZaCS
        nUZoonHlU6qrWfbRgagC7GITGLSintBVAD+aqHGcYfJcX2CK4owr/1ekY/7nMFjxWgLDAnJyULBl
        ZTA6hrsz4k3cM7wP4oMh5UNqLQG06goobk638JbcfoERfIz80uWcvddTZh6MmtzEeg/++8YLoBo6
        sRzsT/AUDm8jjfpGQdbnxJzOi55pM8x6soCThxfl7rvbZDBhD/7Dg45q3oOfyTiZTqE8Ne8AdWvT
        u4MaldJ3n7aLDcfbvuLY2fbKMtdim+DaOBOr5d5qmGJU8ZigcQU/Yjpp79tXvwEAAP//AwC2/gm4
        RQQAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cabe40de813e863-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Sun, 21 May 2023 09:46:30 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '19184'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86472'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.352s
      x-request-id:
      - 99d7c7f4af4c41c383b69cc555f593c8
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. download_file: Download File, args: \"url\":
      \"<url>\", \"filename\": \"<filename>\"\n4. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n5. read_file: Read file, args: \"filename\":
      \"<filename>\"\n6. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: (config: autogpt.config.config.Config) ->
      str\n11. message_agent: Message GPT Agent, args: \"key\": \"<key>\", \"message\":
      \"<message>\"\n12. start_agent: Start GPT Agent, args: \"name\": \"<name>\",
      \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n13. task_complete:
      Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1. Internet
      access for searches and information gathering.\n2. Long Term memory management.\n3.
      GPT-3.5 powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n5. Write all code to a
      file.\n\nYou should only respond in JSON format as described below \nResponse
      Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nAs
      a system, I recall that I was created and there have been no new developments
      to report."}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I should start by reading the instructions_1.txt
      file using the read_file command.\",\n        \"reasoning\": \"The first step
      in following the instructions is to read them. The read_file command is the
      appropriate command for this task.\",\n        \"plan\": \"- Use the read_file
      command to read the instructions_1.txt file.\",\n        \"criticism\": \"I
      need to ensure that I am reading the correct file and that I am properly parsing
      the instructions.\",\n        \"speak\": \"I will start by reading the instructions
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}, {"role":
      "assistant", "content": "{\n    \"thoughts\": {\n        \"text\": \"The next
      instruction is to read the file instructions_2.txt. I will use the read_file
      command to read this file.\",\n        \"reasoning\": \"The instructions require
      me to read the file instructions_2.txt. The read_file command is the appropriate
      command for this task.\",\n        \"plan\": \"- Use the read_file command to
      read the instructions_2.txt file.\",\n        \"criticism\": \"I need to ensure
      that I am reading the correct file and that I am properly parsing the instructions.\",\n        \"speak\":
      \"I will now read the instructions_2.txt file.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5592'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA4yST2/aQBDF7/0UozkbhOMEgm+tcqgrVTk0VQ91hDbrwd7i/ZPdsQAhf/fKNsSI
        cOA6b+bN7+3OAVWBKcpKsNSuniwy7zJt3/98y/bF93ibPH99ds3P5X7549cTRmjf/pHk48RUWu1q
        YmUNRig9CaYC03j+eL9I4nj+GKG2BdWYYul4kkwfJtz4NzuZJbMYI2yCKAnTAzpvteMV2w2ZgGl8
        N1tGOJqPwvwhQrYs6rGULO7bCGVllaSA6d8DagonY29rwhRFCCqwMNxhWsNkugiH3AAA5MiVbcqK
        Q44pHItHgXbcFXN8qQgM7RiUCewb2WGBCsAWPIkCuCJYq5rO9bBKprzjKWSwVXUNTaC+rxtY9c3S
        ai1MceaiQm8zzTE6B/EkgjXKlCPN+SLw9N4oT6DpNqKXqxhdnopAOOet80rwKK2tH+hYhM0lnauF
        GcAm8PuGkNeYrsaWXrGSKujBPQND1BuRCY3vFgmGDITunZUpe3NpvSc5OEK/+aOtC0a+3oMTPpz6
        z2EuCYIjsTlt73/R2O0tOQaTNjrd2PEVPp2YEZoG/48Xu0AQvry8zEHoesfxzygniB7kyJObFtsI
        18qoUK2Gs8IUA1uHESpT0A7TWfvafvkPAAD//wMACm0VOxoEAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cb273ac7f32e5c6-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 22 May 2023 04:53:07 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '18585'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86460'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.36s
      x-request-id:
      - d6376392d6357633998343e48698750c
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. download_file: Download File, args: \"url\":
      \"<url>\", \"filename\": \"<filename>\"\n4. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n5. read_file: Read file, args: \"filename\":
      \"<filename>\"\n6. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: (config: autogpt.config.config.Config) ->
      str\n11. message_agent: Message GPT Agent, args: \"key\": \"<key>\", \"message\":
      \"<message>\"\n12. start_agent: Start GPT Agent, args: \"name\": \"<name>\",
      \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n13. task_complete:
      Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1. Internet
      access for searches and information gathering.\n2. Long Term memory management.\n3.
      GPT-3.5 powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n5. Write all code to a
      file.\n\nYou should only respond in JSON format as described below \nResponse
      Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nI was
      created and nothing new has happened."}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I should start by reading the instructions_1.txt file using the read_file
      command.\",\n        \"reasoning\": \"The first step in following the instructions
      is to read them. The read_file command is the appropriate command for this task.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_1.txt file.\",\n        \"criticism\":
      \"I need to ensure that I am reading the correct file and that I am properly
      parsing the instructions.\",\n        \"speak\": \"I will start by reading the
      instructions file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\r\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}], "temperature":
      0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '4539'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6SSTY/TMBCG7/wKa85O1ZB2P3JEHNgDN1YcCKpcZ5p469jGM1GLqvx3lK92ySKE
        xPX1zPs+M54LmBJy0LVi3QSb3D9F+ly5zXEdTyqqF/31+cfHu08f9uWJTyDB719Q89Sx0r4JFtl4
        BxJ0RMVYQp7ePWzuszTbPkhofIkWcqgCJ9lqm3Ab9z5ZZ+sUJLSkKoT8AiH6JvCO/REdQf74uJZw
        877q6TaTwJ6VvUnpJusk6NobjQT5tws0SLNv9BYhB0VkiJXjntI7RtdPcCmcEEIUwLVvq5qpgFxM
        4vSAZ+7FAp6EQywFexFRlYJrFMYRx1b3gLR7v+Izi4OxKFoyrhoq+tLdoGnfNMqVqwLka/+Iirwz
        rhpDvvzFtcdWxtFg7PDMgpCFP/zWILhWLG6sB2+tPy1Tg1VuDEzEM+GfUf9l1KWxjoaNNtQsd4aO
        2ogznWoG53lL2seIehpzSL6WhegDRvtTBBWvW30NsySggOo4p5+Mtf/7XaN5J+dTmV7eXIpTDY65
        V5cFmorV8sDGh7721v4Wc4YYQCaewnXQSTgYZ6jejWcEORD7ABKMK/EM+br73r37BQAA//8DALns
        yjvgAwAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cb2784ddb9d2cce-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 22 May 2023 04:56:12 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '13813'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86471'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.352s
      x-request-id:
      - 3cfa490555d5e9809517d0e4a10b1145
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. download_file: Download File, args: \"url\":
      \"<url>\", \"filename\": \"<filename>\"\n4. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n5. read_file: Read file, args: \"filename\":
      \"<filename>\"\n6. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: (config: autogpt.config.config.Config) ->
      str\n11. message_agent: Message GPT Agent, args: \"key\": \"<key>\", \"message\":
      \"<message>\"\n12. start_agent: Start GPT Agent, args: \"name\": \"<name>\",
      \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n13. task_complete:
      Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1. Internet
      access for searches and information gathering.\n2. Long Term memory management.\n3.
      GPT-3.5 powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n5. Write all code to a
      file.\n\nYou should only respond in JSON format as described below \nResponse
      Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nAs
      a system, I recall that I was created and there have been no new developments
      to report."}, {"role": "user", "content": "Determine which next command to use,
      and respond using the format specified above:"}, {"role": "assistant", "content":
      "{\n    \"thoughts\": {\n        \"text\": \"I should start by reading the instructions_1.txt
      file using the read_file command.\",\n        \"reasoning\": \"The first step
      in following the instructions is to read them. The read_file command is the
      appropriate command for this task.\",\n        \"plan\": \"- Use the read_file
      command to read the instructions_1.txt file.\",\n        \"criticism\": \"I
      need to ensure that I am reading the correct file and that I am properly parsing
      the instructions.\",\n        \"speak\": \"I will start by reading the instructions
      file.\"\n    },\n    \"command\": {\n        \"name\": \"read_file\",\n        \"args\":
      {\n            \"filename\": \"instructions_1.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: This task_id is 2314\r\nRead
      the file instructions_2.txt"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}, {"role":
      "assistant", "content": "{\n    \"thoughts\": {\n        \"text\": \"I need
      to read the instructions_2.txt file using the read_file command.\",\n        \"reasoning\":
      \"The instructions_2.txt file contains the next set of instructions that I need
      to follow.\",\n        \"plan\": \"- Use the read_file command to read the instructions_2.txt
      file.\",\n        \"criticism\": \"I need to ensure that I am reading the correct
      file and that I am properly parsing the instructions.\",\n        \"speak\":
      \"I will read the instructions_2.txt file using the read_file command.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_2.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: Read the file instructions_3.txt"}, {"role": "user",
      "content": "Determine which next command to use, and respond using the format
      specified above:"}], "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '5537'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6SSy27bMBBF9/0KYta0YUFxnWqfFAGya7JpVRg0NZaYUCTLGcEqDP17oZedKkVR
        oNt53HvmcQZTQAa6UqzrYFe7h0j6MdBXdXz6UX2+v3vW9+2XQ9jdPoYTSPCHF9Q8day1r4NFNt6B
        BB1RMRaQJR9vb3Zpku5uJNS+QAsZlIFX6Xq74iYe/GqTbhKQ0JAqEbIzhOjrwHv2r+gIsiT5tJNw
        Fb8mtqkE9qzsNZRuN50EXXmjkSD7doYaaRaO3iJkoIgMsXLcY3rH6PoRzrkTQogcuPJNWTHlkIkp
        OCWw5T6Yw4NwiIVgLyKqQnCFwjji2OgekPbpmlsWR2NRNGRcOVT0pfshpn1dK1esc5Bv9SMq8s64
        cjR5+otqj62Mo0HYYcuCkIU//tYguFIsrqxHb60/LV2DVW40XIlnwj+j/suoS2EdDRttqF7uDB01
        EWc6VQ/K85a0jxH1NObgfCkL0QeM9qcIKl62+hZmSUAB1evsfjLW/u+5RvFOzq8yZd59ilM1jr4X
        lQWaiuXywcZEX3ttf485QwwgE0/uOugkHI0zVO3HN4IMiH0ACcYV2EK26b53H34BAAD//wMAbvYE
        ZuEDAAA=
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cb278b37ad42cce-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 22 May 2023 04:56:35 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '20905'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86461'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.358s
      x-request-id:
      - 39f789b52b255e2e0a9b3eb14ede8abe
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. download_file: Download File, args: \"url\":
      \"<url>\", \"filename\": \"<filename>\"\n4. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n5. read_file: Read file, args: \"filename\":
      \"<filename>\"\n6. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: (config: autogpt.config.config.Config) ->
      str\n11. message_agent: Message GPT Agent, args: \"key\": \"<key>\", \"message\":
      \"<message>\"\n12. start_agent: Start GPT Agent, args: \"name\": \"<name>\",
      \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n13. task_complete:
      Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1. Internet
      access for searches and information gathering.\n2. Long Term memory management.\n3.
      GPT-3.5 powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n5. Write all code to a
      file.\n\nYou should only respond in JSON format as described below \nResponse
      Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nAs
      a system, I recall that nothing new has happened since my creation."}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I should start by reading the instructions_1.txt file
      using the read_file command.\",\n        \"reasoning\": \"The first step in
      following the instructions is to read them. The read_file command is the appropriate
      command for this task.\",\n        \"plan\": \"- Use the read_file command to
      read the instructions_1.txt file.\",\n        \"criticism\": \"I need to ensure
      that I am reading the correct file and that I am properly parsing the instructions.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\r\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains the next set of instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file.\",\n        \"criticism\":
      \"I need to ensure that I am reading the correct file and that I am properly
      parsing the instructions.\",\n        \"speak\": \"I will read the instructions_2.txt
      file using the read_file command.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_3.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_3.txt file
      contains the next set of instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file.\",\n        \"criticism\":
      \"I need to ensure that I am reading the correct file and that I am properly
      parsing the instructions.\",\n        \"speak\": \"I will read the instructions_3.txt
      file using the read_file command.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_3.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Write the task_id
      into the file output.txt\r\nShutdown"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"}],
      "temperature": 0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '6488'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6ySW2vbQBCF3/srhnleGztybEevoVDTl1Dap6qYzWosbay9sDsibo3+e9ENJeoF
        Anmds3POtzNzRZ1jiqqUrIyvFrtD4NXT5y+bMv/1oO/3Px/M4ePlHHanffyEAt3jEykeOpbKGV8R
        a2dRoAokmXJM19v9Zpesk7u9QONyqjDFwvMiWd4uuA6PbrFKVmsUWEdZEKZX9MEZz0d2Z7IR03Vy
        dyNwMp+E3VYgO5bVVLrd7huBqnRaUcT0+xUNxdE4uIowRRmjjiwtt5jOMtn2C9fMAgBkyKWri5Jj
        hikMxUGgC7fFDA9giXJgB89BMwGXBCzj+ahz0JZdV3A1+5qXfGE46YqgjtoWndI1Hdkdu7pyxkib
        LzMUL9MCyeistkUf+bUk0DZyqFU7hAhMVQWG3gYhQNr83wygYydK74PzQUuepJMLwGX7QMbzHNZX
        0vacC/gW6T8Jb8Kdx6igWSsdzXwNZGMdWk/JcABpuoxx3MqFQIpB25MLRrbjgyFvlP4WFj3J8xj0
        rKvqfZfdRzViPLtB+ePqrDTUU7xymsHKUMwPthfat5PFhPmqf37fN8l6MxJ2lANsZhtsBJ601bE8
        9heKKUZ2HgVqm9MF01Xzo/nwGwAA//8DAO/IyhxKBAAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cb2794569932cce-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 22 May 2023 04:56:55 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '16982'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '84499'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 3.666s
      x-request-id:
      - f9dd621f4f25dc0ab2918ba3f59142cc
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. download_file: Download File, args: \"url\":
      \"<url>\", \"filename\": \"<filename>\"\n4. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n5. read_file: Read file, args: \"filename\":
      \"<filename>\"\n6. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: (config: autogpt.config.config.Config) ->
      str\n11. message_agent: Message GPT Agent, args: \"key\": \"<key>\", \"message\":
      \"<message>\"\n12. start_agent: Start GPT Agent, args: \"name\": \"<name>\",
      \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n13. task_complete:
      Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1. Internet
      access for searches and information gathering.\n2. Long Term memory management.\n3.
      GPT-3.5 powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n5. Write all code to a
      file.\n\nYou should only respond in JSON format as described below \nResponse
      Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nAs
      a system, I recall that nothing new has happened since my creation."}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I should start by reading the instructions_1.txt file
      using the read_file command.\",\n        \"reasoning\": \"The first step in
      following the instructions is to read them. The read_file command is the appropriate
      command for this task.\",\n        \"plan\": \"- Use the read_file command to
      read the instructions_1.txt file.\",\n        \"criticism\": \"I need to ensure
      that I am reading the correct file and that I am properly parsing the instructions.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\r\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains the next set of instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file.\",\n        \"criticism\":
      \"I need to ensure that I am reading the correct file and that I am properly
      parsing the instructions.\",\n        \"speak\": \"I will read the instructions_2.txt
      file using the read_file command.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_3.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_3.txt file
      contains the next set of instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file.\",\n        \"criticism\":
      \"I need to ensure that I am reading the correct file and that I am properly
      parsing the instructions.\",\n        \"speak\": \"I will read the instructions_3.txt
      file using the read_file command.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_3.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Write the task_id
      into the file output.txt\r\nShutdown"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I need to write the task_id into the output.txt file using the write_to_file
      command.\",\n        \"reasoning\": \"The instructions tell me to write the
      task_id into the output.txt file, and the write_to_file command is the appropriate
      command for this task.\",\n        \"plan\": \"- Use the write_to_file command
      to write the task_id into the output.txt file.\",\n        \"criticism\": \"I
      need to ensure that I am writing the correct information to the correct file.\",\n        \"speak\":
      \"I will write the task_id into the output.txt file using the write_to_file
      command.\"\n    },\n    \"command\": {\n        \"name\": \"write_to_file\",\n        \"args\":
      {\n            \"filename\": \"output.txt\",\n            \"text\": \"2314\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command write_to_file returned: File written
      to successfully."}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}], "temperature": 0,
      "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '7544'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA5SST4/TMBDF73yK0ZzTKlG7W5QjtyIhcQAhQVDldaaJqf/JM2HbrfLdUZqUdoNA
        4jrP/r3nNz6jqbFE3SrRLtrFZpvk/cNL4z6cfn4pPp7o+I6+NtE9rtcvHjMMTz9Iy3RjqYOLlsSE
        QdKJlFCNZfH4dr1ZFetik6ELNVkssYmyWC0fFtKlp7DIV3mBGXasGsLyjDEFF2Un4UCeB0CRZ3iD
        34RVnqEEUfY22qzzPkPdBqOJsfx2Rkd8BadgCUtUzIZFeRliBi/khyecKw8AUKG0oWta4QpLmIaT
        QEcZhhVuwRPVIAG47aQOzx46Nr4BaQlE8WE3xSXQwTnl62WF2T0rkeLgjW9G4KeWwHiW1OnhiQxC
        1oKje4sMlK//7gCGL6KKMYWYjLqT9iGBtMMBxYd5lGiVH1Ms4DPTPxzuwswhOhkx2rCbF0SeuzRA
        lcAWlLsQZOjqUtuYbLBIibTA2MuczpHU4Up+Ntb+T+8jqM+u+52UP9brlaPR4xVpFkWlZv4z7jc6
        rVPxAa6AGrjTmpj3nbWn34EuoaZsle+xz3BvvOF2N5KwRJYQMUPjazpimfff+ze/AAAA//8DAKmd
        aJ+iAwAA
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cb279c08f5f2cce-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 22 May 2023 04:57:10 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '12809'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '86469'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.354s
      x-request-id:
      - e823e694b86e89f856e1cbad7299317d
    status:
      code: 200
      message: OK
- request:
    body: '{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You
      are Follow-Instructions-GPT, an AI designed to read the instructions_1.txt file
      using the read_file method and follow the instructions in the file.\nYour decisions
      must always be made independently without seeking user assistance. Play to your
      strengths as an LLM and pursue simple strategies with no legal complications.\n\nGOALS:\n\n1.
      Use the command read_file to read the instructions_1.txt file\n2. Follow the
      instructions in the instructions_1.txt file\n\n\nConstraints:\n1. ~4000 word
      limit for short term memory. Your short term memory is short, so immediately
      save important information to files.\n2. If you are unsure how you previously
      did something or want to recall past events, thinking about similar events will
      help you remember.\n3. No user assistance\n4. Exclusively use the commands listed
      below e.g. command_name\n\nCommands:\n1. append_to_file: Append to file, args:
      \"filename\": \"<filename>\", \"text\": \"<text>\"\n2. delete_file: Delete file,
      args: \"filename\": \"<filename>\"\n3. download_file: Download File, args: \"url\":
      \"<url>\", \"filename\": \"<filename>\"\n4. list_files: List Files in Directory,
      args: \"directory\": \"<directory>\"\n5. read_file: Read file, args: \"filename\":
      \"<filename>\"\n6. write_to_file: Write to file, args: \"filename\": \"<filename>\",
      \"text\": \"<text>\"\n7. delete_agent: Delete GPT Agent, args: \"key\": \"<key>\"\n8.
      get_hyperlinks: Get text summary, args: \"url\": \"<url>\"\n9. get_text_summary:
      Get text summary, args: \"url\": \"<url>\", \"question\": \"<question>\"\n10.
      list_agents: List GPT Agents, args: (config: autogpt.config.config.Config) ->
      str\n11. message_agent: Message GPT Agent, args: \"key\": \"<key>\", \"message\":
      \"<message>\"\n12. start_agent: Start GPT Agent, args: \"name\": \"<name>\",
      \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\"\n13. task_complete:
      Task Complete (Shutdown), args: \"reason\": \"<reason>\"\n\nResources:\n1. Internet
      access for searches and information gathering.\n2. Long Term memory management.\n3.
      GPT-3.5 powered Agents for delegation of simple tasks.\n4. File output.\n\nPerformance
      Evaluation:\n1. Continuously review and analyze your actions to ensure you are
      performing to the best of your abilities.\n2. Constructively self-criticize
      your big-picture behavior constantly.\n3. Reflect on past decisions and strategies
      to refine your approach.\n4. Every command has a cost, so be smart and efficient.
      Aim to complete tasks in the least number of steps.\n5. Write all code to a
      file.\n\nYou should only respond in JSON format as described below \nResponse
      Format: \n{\n    \"thoughts\": {\n        \"text\": \"thought\",\n        \"reasoning\":
      \"reasoning\",\n        \"plan\": \"- short bulleted\\n- list that conveys\\n-
      long-term plan\",\n        \"criticism\": \"constructive self-criticism\",\n        \"speak\":
      \"thoughts summary to say to user\"\n    },\n    \"command\": {\n        \"name\":
      \"command name\",\n        \"args\": {\n            \"arg name\": \"value\"\n        }\n    }\n}
      \nEnsure the response can be parsed by Python json.loads"}, {"role": "system",
      "content": "The current time and date is Tue Jan  1 00:00:00 2000"}, {"role":
      "system", "content": "This reminds you of these events from your past: \nAs
      a system, I recall that nothing new has happened since my creation."}, {"role":
      "user", "content": "Determine which next command to use, and respond using the
      format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I should start by reading the instructions_1.txt file
      using the read_file command.\",\n        \"reasoning\": \"The first step in
      following the instructions is to read them. The read_file command is the appropriate
      command for this task.\",\n        \"plan\": \"- Use the read_file command to
      read the instructions_1.txt file.\",\n        \"criticism\": \"I need to ensure
      that I am reading the correct file and that I am properly parsing the instructions.\",\n        \"speak\":
      \"I will start by reading the instructions file.\"\n    },\n    \"command\":
      {\n        \"name\": \"read_file\",\n        \"args\": {\n            \"filename\":
      \"instructions_1.txt\"\n        }\n    }\n}"}, {"role": "system", "content":
      "Command read_file returned: This task_id is 2314\r\nRead the file instructions_2.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_2.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_2.txt file
      contains the next set of instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_2.txt file.\",\n        \"criticism\":
      \"I need to ensure that I am reading the correct file and that I am properly
      parsing the instructions.\",\n        \"speak\": \"I will read the instructions_2.txt
      file using the read_file command.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_2.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Read the file instructions_3.txt"},
      {"role": "user", "content": "Determine which next command to use, and respond
      using the format specified above:"}, {"role": "assistant", "content": "{\n    \"thoughts\":
      {\n        \"text\": \"I need to read the instructions_3.txt file using the
      read_file command.\",\n        \"reasoning\": \"The instructions_3.txt file
      contains the next set of instructions that I need to follow.\",\n        \"plan\":
      \"- Use the read_file command to read the instructions_3.txt file.\",\n        \"criticism\":
      \"I need to ensure that I am reading the correct file and that I am properly
      parsing the instructions.\",\n        \"speak\": \"I will read the instructions_3.txt
      file using the read_file command.\"\n    },\n    \"command\": {\n        \"name\":
      \"read_file\",\n        \"args\": {\n            \"filename\": \"instructions_3.txt\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command read_file returned: Write the task_id
      into the file output.txt\r\nShutdown"}, {"role": "user", "content": "Determine
      which next command to use, and respond using the format specified above:"},
      {"role": "assistant", "content": "{\n    \"thoughts\": {\n        \"text\":
      \"I need to write the task_id into the output.txt file using the write_to_file
      command.\",\n        \"reasoning\": \"The instructions tell me to write the
      task_id into the output.txt file, and the write_to_file command is the appropriate
      command for this task.\",\n        \"plan\": \"- Use the write_to_file command
      to write the task_id into the output.txt file.\",\n        \"criticism\": \"I
      need to ensure that I am writing the correct information to the correct file.\",\n        \"speak\":
      \"I will write the task_id into the output.txt file using the write_to_file
      command.\"\n    },\n    \"command\": {\n        \"name\": \"write_to_file\",\n        \"args\":
      {\n            \"filename\": \"output.txt\",\n            \"text\": \"2314\"\n        }\n    }\n}"},
      {"role": "system", "content": "Command write_to_file returned: File written
      to successfully."}, {"role": "user", "content": "Determine which next command
      to use, and respond using the format specified above:"}, {"role": "assistant",
      "content": "{\n    \"thoughts\": {\n        \"text\": \"I need to shutdown using
      the task_complete command.\",\n        \"reasoning\": \"The instructions tell
      me to shutdown, and the task_complete command is the appropriate command for
      this task.\",\n        \"plan\": \"- Use the task_complete command to shutdown.\",\n        \"criticism\":
      \"I need to ensure that I am shutting down for the correct reason.\",\n        \"speak\":
      \"I will shutdown using the task_complete command.\"\n    },\n    \"command\":
      {\n        \"name\": \"task_complete\",\n        \"args\": {\n            \"reason\":
      \"Task completed successfully.\"\n        }\n    }\n}"}, {"role": "system",
      "content": "Command task_complete returned: Error: task_complete() got an unexpected
      keyword argument ''config''"}, {"role": "user", "content": "Determine which
      next command to use, and respond using the format specified above:"}], "temperature":
      0, "max_tokens": 0}'
    headers:
      Accept:
      - '*/*'
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      Content-Length:
      - '8469'
      Content-Type:
      - application/json
    method: POST
    uri: https://api.openai.com/v1/chat/completions
  response:
    body:
      string: !!binary |
        H4sIAAAAAAAAA6ySXavTQBCG7/0Vy1xvSntS7WluRfSoKIIKaqRsN9NkTfaDnYk9peS/H/JRWyuK
        grczO8/7zux7BFNABrpSrG1oktVd5E9v14fPpnSHd+bVy6fP5q/j848qvHlBIMFvv6HmaWKmvQ0N
        svEOJOiIirGAbPHkdrlKF8v0RoL1BTaQQRk4SWePE27j1ifzdL4ACS2pEiE7QojeBt6wr9ERZIvV
        7VrCGX5uLFMJ7Fk159I6vekk6MobjQTZlyNYpBM4+gYhA0VkiJXj3qZ3jK5f4Zg7IYTIgSvflhVT
        DpmYilMD77kv5nAnHGIh2AuqWi783omWjCsFVyhYUb2Z7KLQ3lrlCrE3PZeHF9q7nSmFimVr0fEs
        B3mpE1GRd8aVo9j73zINDTgVQvQhGnXR2vkouOofKKql2LYszqYjWv8d/8ZKaJQbXSTiA+Ef9ru8
        xT/sqqNhow3Z68Oiozb2gqp3ruxA5/7Gg8S4X4+PETWL8WbXdAqo6hN5b5rmf/3XKNLJU2amqV8i
        45TFUf8nlSubKpbXabtMwhQDRbU4AQpBrdZItGub5vDD0GBq8pa7DjoJO+MMVZuRBBkQ+wASjCvw
        HrJ597V79AAAAP//AwAJQ3m39gMAAA==
    headers:
      CF-Cache-Status:
      - DYNAMIC
      CF-RAY:
      - 7cb27a1f7ebd2cce-DFW
      Cache-Control:
      - no-cache, must-revalidate
      Connection:
      - keep-alive
      Content-Encoding:
      - gzip
      Content-Type:
      - application/json
      Date:
      - Mon, 22 May 2023 04:57:27 GMT
      Server:
      - cloudflare
      access-control-allow-origin:
      - '*'
      alt-svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
      openai-model:
      - gpt-3.5-turbo-0301
      openai-organization:
      - significant-gravitas
      openai-processing-ms:
      - '14267'
      openai-version:
      - '2020-10-01'
      strict-transport-security:
      - max-age=15724800; includeSubDomains
      x-ratelimit-limit-requests:
      - '3500'
      x-ratelimit-limit-tokens:
      - '90000'
      x-ratelimit-remaining-requests:
      - '3499'
      x-ratelimit-remaining-tokens:
      - '85662'
      x-ratelimit-reset-requests:
      - 17ms
      x-ratelimit-reset-tokens:
      - 2.891s
      x-request-id:
      - 0d455d360a4c3ff331bc49de84f1d329
    status:
      code: 200
      message: OK
version: 1
